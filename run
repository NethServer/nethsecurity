#!/bin/bash

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

#
# Launch podman image to build nethsecurity
# As default the script mounts as volume staging and build dirs to speedup successibe builds
#

workdir=$(pwd)
image_tag=${IMAGE_TAG:-latest}
image="ghcr.io/nethserver/nethsecurity-builder:$image_tag"

VALID_ARGS=$(getopt -o n --long no-cache -- "$@")
if [[ $? -ne 0 ]]; then
    exit 1;
fi

cache=1
opts=""

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    -n | --no-cache)
        echo "Disable caching"
	cache=0
        shift
        ;;
    --) shift; 
        break 
        ;;
  esac
done

# Setup output dir
# Delete existing backup, but save current output before starting the build
if [ -d bin ]; then
    rm -rf bin.bak
    mv bin bin.bak
fi

# Setup cache volumes
if [ $cache -ge 1 ]; then
    opts=" -v nethsecurity-build_dir:/home/build/openwrt/build_dir:z -v nethsecurity-staging_dir:/home/build/openwrt/staging_dir:z -v nethsecurity-ccache:/home/build/openwrt/.ccache -v nethsecurity-download:/home/build/openwrt/download"
fi

# Download latest image
podman pull $image

# Remove existing container
if [ "$(podman ps -a --format '{{.Names}}')" == "nethsec-builder" ]; then
    podman rm nethsec-builder
fi

# Use VERSION from the environment, need for CI
# VERSION has the following format: 8-<owrt_release>-ns.<nethsecurity_release>[-<commit_since_last_tag>-g<commit_hash>]
if [ -z "${VERSION}" ]; then
    # Setup version from git if the env var is not set
    if [[ -n "${CI}" ]]; then
        # Fetch all history when running con Github CI
        git fetch --prune --unshallow
    fi
    VERSION=$(git describe)
fi
# OWRT_VERSION is like 23.05.2
OWRT_VERSION=$(echo $VERSION | cut -d'-' -f1)
# NS_VERSION is a semver release like '1.0.0' for stable and '1.0.0-alpha1' or '1.0.0-234-g1bc543c' for dev
NS_VERSION=$(echo $VERSION | cut -d- -f2- | cut -d. -f2-)
if [[ "$NS_VERSION" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
    MAJOR="${BASH_REMATCH[1]}"
    MINOR="${BASH_REMATCH[2]:-""}"
    PATCH="${BASH_REMATCH[3]:-""}"
    PRE_RELEASE="${BASH_REMATCH[5]:-""}"
    BUILD_METADATA="${BASH_REMATCH[10]:-""}"
fi
# Publish to dev channel for tagged unstable versions and dev builds
if [ -z "$PRE_RELEASE" ]; then
     REPO_CHANNEL="stable"
 else
     REPO_CHANNEL="dev"
fi

export REPO_CHANNEL
export OWRT_VERSION
export VERSION

# Setup CI when pushing to Github.
if [[ -n "${CI}" ]]; then
    # Set output value for Github Actions
    echo "VERSION=$VERSION" >> "${GITHUB_ENV}"
    echo "::notice title=VERSION::$VERSION"
    echo "REPO_CHANNEL=$REPO_CHANNEL" >> "${GITHUB_ENV}"
    echo "::notice title=FIXED_REPOSITORY::$REPO_CHANNEL/$VERSION"
    echo "OWRT_VERSION=$OWRT_VERSION" >> "${GITHUB_ENV}"
    echo "::notice title=ROLLING_REPOSITORY::$REPO_CHANNEL/$OWRT_VERSION"
fi

# Run podman with local mounted dirs
podman run -ti --name nethsec-builder \
    --security-opt label=disable \
    --env=USIGN_PUB_KEY --env=USIGN_PRIV_KEY \
    --env=NETIFYD_ACCESS_TOKEN \
    --env=VERSION --env=REPO_CHANNEL --env=OWRT_VERSION \
    -v ./config:/config:z -v ./files:/files:z -v ./packages:/nspackages:z -v ./patches:/patches:z \
    $opts $image "$@"
# When executed inside CI, do not execute next setps on error
ret=$?
if [[ $ret -gt 0 && -n "${CI}" ]]; then
    exit $ret
fi
podman cp nethsec-builder:/home/build/openwrt/bin/ $workdir/
if [ $? -eq 0 ]; then
    podman rm nethsec-builder
else
    echo
    echo "Export of built binaries failed: the container has not been removed"
    echo "To remove the container use: podman rm nethsec-builder"
    echo "To re-try export built binaries: podman cp nethsec-builder:/home/build/openwrt/bin/ $workdir/"
    echo
fi
