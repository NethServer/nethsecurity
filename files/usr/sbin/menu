#!/bin/bash
#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

function list_free_disks()
{
    for device in $(find /dev/ -name 'sd[a-z]' -o -name 'nvme[0-9]' -o -name 'hd[a-z]' -o -name 'vd[a-z]' -o -name 'xvd[a-z]' -o -name 'mmcblk[0-9]'); do
	if ! grep -q $device /proc/mounts; then
            echo $device
	fi
    done
}

function load_kmap() {
    A=0;declare -a B
    for keymap in $(find /usr/share/keymaps/ -type f -name \*.bin); do
        echo "$(color_green ${A} )) ${keymap:19}"; ((A+=1));B+=($keymap);
    done; sleep 1;
    read -p "$(color_white 'Your choice: ')" keymap
    if [ ${keymap:-999} -ge 0 ] && [ ${keymap:-999} -lt $A ]; then
       loadkmap < ${B[$keymap]}
    else
       wrong_command;
    fi
}

function install_nextsec() {
    if [ $(grep "${1##*/}" /proc/partitions | wc -l) -gt 1 ]; then
        echo -e "Multiple partitions found on $(color_white $1), proceed forcing install ?\n[All content on device will be deleted]"
        read -rp "$(color_white 'Do you want to proceed? (y/N) ')" force
        case $force in
	    [yY] ) msg=$(install-nx.sh -f -t $1; exit $?); error=$?;;
	    * ) msg="Aborted"; error=1;;
        esac
     else
       msg=$(install-nx.sh -t $1; exit $?); error=$?;
     fi
     if [ $error -eq 0 ]; then
          sync
          mount -o remount,ro /boot
          mount -o remount,ro /
          sleep 1
          reset
          echo -e "Install: done"
          read -rp "$(color_white 'Remove install medium and press enter to reboot')" done;
          reboot
          sleep infinity
     else
          echo "Error: $msg"
     fi
}

function perhaps_install_nextsec() {
    A=0;declare -a B
    for disk in $(list_free_disks |sort|uniq); do
        echo -n "$(color_green "${A})" ) $(color_white ${disk:5})"; ((A+=1));B+=($disk);
        dmesg| grep "${disk:5}" | head -n 1| cut -d "]" -f 3-
    done; sleep 1;
    read -rp "$(color_white 'Your choice: ')" disk
    if [ ${disk:-999} -ge 0 ] && [ ${disk:-999} -lt $A ] && [ -b ${B[$disk]} ]; then
	install_nextsec ${B[$disk]};
    else
	wrong_command;
    fi
}

function color_green(){
    echo -ne '\e[32m'$1'\e[0m'
}
function color_white(){
    echo -ne '\e[97m'$1'\e[0m'
}
function wrong_command(){
    echo -e '\e[31m'"Wrong option."'\e[0m';
}

function menu(){
   my_disk=$(df -t vfat /boot | tail -n 1| cut -d " " -f 1| tr -d "1")
   disk=$(list_free_disks | tail -n 1)
   echo -ne "
Quick options:
$(color_green '1)') Load alternate keyboard maps"
   label=($(block info ${my_disk}3));
   usb=$(lsusb -t)
   if [[ "${label[2]}" == "LABEL=\"store\"" ]] && [[ $usb = *"usb-storage"* ]]; then 
   echo -ne "
$(color_green '2)') Install NextSecurity on $(color_white ${disk:5})
$(color_green '3)') Install NextSecurity on other storage"
   fi
   echo -ne "
$(color_green 'l)') Login
$(color_green 'x)') Exit
$(color_white 'Choose an option:') "
   read choice
   case $choice in
	1) load_kmap; menu ;;
	2) install_nextsec $disk; menu;;
	3) perhaps_install_nextsec; menu;;
	l) exec /bin/login ;;
	x) exit 0 ;;
	*) wrong_command; menu ;;
        esac
}

# Call the menu function
/usr/bin/clear
/bin/cat /etc/banner
menu
