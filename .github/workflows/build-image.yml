name: "Build NethSecurity image"

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Target architecture"
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - lamobo
      channel:
        description: "Repository channel"
        required: false
        type: string
  push:
    branches:
      - 'main'
    paths:
      - 'config/**'
      - 'files/**'
      - 'packages/**'
      - 'patches/**'
    tags:
      - '*'
  pull_request:
    paths:
      - 'config/**'
      - 'files/**'
      - 'packages/**'
      - 'patches/**'

jobs:
  publish_images:
    name: 'Build NethSecurity image'
    runs-on: self-hosted
    env:
      DO_SPACE_NAME: 'nethsecurity'
      DO_SPACE_REGION: 'ams3'
      CDN_NAME: 'updates.nethsecurity.nethserver.org'
      USIGN_PUB_KEY: ${{ secrets.USIGN_PUB_KEY }}
      USIGN_PRIV_KEY: ${{ secrets.USIGN_PRIV_KEY }}
      NETIFYD_ACCESS_TOKEN: ${{ secrets.NETIFYD_ACCESS_TOKEN }}
      TARGET: ${{ github.event.inputs.target }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup REPO_CHANNEL
        run: |
          # When pushing a tag, set REPO_CHANNEL to stable
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "REPO_CHANNEL=stable" >> $GITHUB_ENV
          # When pushing to main branch, set REPO_CHANNEL to dev
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            echo "REPO_CHANNEL=dev" >> $GITHUB_ENV
          # Otherwise, get the branch name of the PR pushing if REPO_CHANNEL is not set
          elif [[ "${{ github.event_name }}" == 'pull_request' && ! -v REPO_CHANNEL ]]; then
            echo "REPO_CHANNEL=${{ github.head_ref }}" >> $GITHUB_ENV
          fi
      - name: Setup NETHSECURITY_VERSION for release
        run: |
          # Fetch NETHSECURITY_VERSION version from build.conf
          echo "NETHSECURITY_VERSION=$(grep -oP 'NETHSECURITY_VERSION=\K.*' build.conf)" >> $GITHUB_ENV
      - name: Build the image
        run: ./build-nethsec.sh
      - name: Update latest_release file
        run: |
          # Create release file pointing to 8-VERSION
          echo "${{ env.NETHSECURITY_VERSION }}" > latest_release
      - uses: actions/upload-artifact@v4
        name: Upload image
        with:
          name: image
          compression-level: 0
          path: |
            bin/targets/**/nethsecurity-*combined-efi.img.gz
      - uses: actions/upload-artifact@v4
        name: Upload manifest file
        with:
          name: manifest
          path: bin/targets/**/nethsecurity-*.manifest
      - uses: actions/upload-artifact@v4
        name: Upload SBOM
        with:
          name: sbom
          path: bin/targets/**/nethsecurity-*.bom.cdx.json
      - uses: actions/upload-artifact@v4
        if: always()
        name: Upload logs
        with:
          name: build-logs
          path: |
            build-log
      - name: Setup rclone
        uses: AnimMouse/setup-rclone@v1
      - name: Copy Packages to repo
        env:
          RCLONE_CONFIG_REPO_PROVIDER: DigitalOcean
          RCLONE_CONFIG_REPO_TYPE: s3
          RCLONE_CONFIG_REPO_ENV_AUTH: true
          RCLONE_CONFIG_REPO_ENDPOINT: ams3.digitaloceanspaces.com
          RCLONE_CONFIG_REPO_ACCESS_KEY_ID: ${{ secrets.DO_SPACE_ACCESS_KEY }}
          RCLONE_CONFIG_REPO_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACE_SECRET_KEY }}
        run: |
          rclone sync --dry-run bin/ repo:nethsecurity/${{ env.REPO_CHANNEL }}/${{ env.NETHSECURITY_VERSION }} --progress --create-empty-src-dirs
          rclone copy --dry-run latest_release repo:nethsecurity/${{ env.REPO_CHANNEL }}/ --progress --create-empty-src-dirs
      - name: Run tools
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          tools/issue-comment
          tools/package-bumper
