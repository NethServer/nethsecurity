#!/usr/bin/python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import base64
import json
import os
import shutil
import subprocess
import sys
import random
import string

from nethsec import utils

UPLOAD_PATH = '/var/run/ns-api-server/uploads/'
DOWNLOAD_PATH = '/var/run/ns-api-server/downloads/'
PASSPHRASE_PATH = '/etc/backup.pass'

def generate_random_file_name():
    return 'backup-' + ''.join(random.choice(string.ascii_letters) for i in range(20))

def create_backup():
    os.makedirs(DOWNLOAD_PATH, exist_ok=True)
    try:
        # run sysupgrade to create backup file
        file_name = generate_random_file_name()
        backup_path = f'{DOWNLOAD_PATH}{file_name}'
        subprocess.run(['/sbin/sysupgrade', '-b', backup_path], check=True, capture_output=True)
        # if passphrase is present, encrypt backup file
        passphrase = fetch_passphrase()
        if passphrase is not None:
            subprocess.run([
                '/usr/bin/gpg',
                '--symmetric',
                '--batch',
                '--passphrase', passphrase,
                '--output', f'{backup_path}.gpg',
                '--yes',
                backup_path
            ], check=True, capture_output=True)
            shutil.move(f'{backup_path}.gpg', backup_path)
    except subprocess.CalledProcessError as error:
        if error.cmd[0] == '/usr/bin/gpg':
            raise RuntimeError('encryption failed')
        elif error.cmd[0] == '/sbin/sysupgrade':
            raise RuntimeError('backup failed')
    return file_name

def restore_backup(archive, passphrase=None):
    try:
        if passphrase is not None:
            subprocess.run([
                '/usr/bin/gpg',
                '--decrypt',
                '--batch',
                '--passphrase', passphrase,
                '--output', f'{archive}.decrypted',
                '--yes',
                archive
            ], check=True, capture_output=True)
            shutil.move(f'{archive}.decrypted', archive)

        # run sysupgrade to restore backup file
        subprocess.run(['/sbin/sysupgrade', '-r', archive], check=True, capture_output=True)

    except subprocess.CalledProcessError as error:
        if error.cmd[0] == '/usr/bin/gpg':
            raise RuntimeError('decryption failed')
        elif error.cmd[0] == '/sbin/sysupgrade':
            raise RuntimeError('restore failed')


def fetch_passphrase():
    try:
        passphrase = None
        if os.path.exists(PASSPHRASE_PATH):
            passphrase = open(PASSPHRASE_PATH, 'r').read().strip()

        return passphrase
    except IOError:
        raise RuntimeError('failed to read passphrase')


cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({
        'backup': { },
        'restore': {
            'backup': 'upload-1e20f4b3-e581-454c-9162-ca33885eb223',
            'passphrase': 'str'
        },
        'set-passphrase': {
            'passphrase': 'str'
        },
        'registered-list-backups': {},
        'registered-backup': {},
        'registered-restore': {
            'file': 'str',
            'passphrase': 'str'
        },
        'registered-download-backup': {
            'file': 'str'
        },
        'is-passphrase-set': { }
    }))
elif cmd == 'call':
    action = sys.argv[2]
    if action == 'backup':
        try:
            # generate backup
            file_name = create_backup()
            print(json.dumps({'backup': file_name}))
        except RuntimeError as error:
            print(json.dumps(utils.generic_error(error.args[0])))

    elif action == 'restore':
        try:
            data = json.load(sys.stdin)
            # restore backup
            backup_path = f'{UPLOAD_PATH}{data.get("backup")}'
            restore_backup(backup_path, data.get('passphrase', None))
            # restore successful, restart the system
            subprocess.run(['/sbin/reboot'], check=True, capture_output=True)
            # reboot takes a few seconds to complete, enough to send the response
            print(json.dumps({'message': 'success'}))
        except RuntimeError as error:
            print(json.dumps(utils.validation_error('passphrase',error.args[0])))

    elif action == 'set-passphrase':
        try:
            # read passphrase, write into default file
            data = json.load(sys.stdin)
            if data['passphrase'] == '':
                os.remove(PASSPHRASE_PATH)
            else:
                open(PASSPHRASE_PATH, 'w').write(data['passphrase'])
            print(json.dumps({'message': 'success'}))
        except IOError as error:
            print(json.dumps(utils.generic_error(f'passphrase write failed')))
        except KeyError as error:
            print(json.dumps(utils.validation_error('passphrase', 'required')))

    elif action == 'registered-list-backups':
        try:
            # list remote backups, the return is a string, so it gets decoded and encoded to generate a formatted json
            completed_process = subprocess.run(['/usr/sbin/remote-backup', 'list'], check=True, capture_output=True,
                                               text=True)
            print(json.dumps({'values': json.loads(completed_process.stdout)}))
        except subprocess.CalledProcessError as error:
            print(json.dumps(utils.generic_error(f'remote list failed')))

    elif action == 'registered-backup':
        try:
            # create backup
            file_name = create_backup()
            backup_path = f'{DOWNLOAD_PATH}{file_name}'
            # upload backup to server and remove it from filesystem
            completed_process = subprocess.run(['/usr/sbin/remote-backup', 'upload', backup_path], check=True,
                                               capture_output=True)
            os.remove(backup_path)
            print(json.dumps({'message': 'success'}))
        except subprocess.CalledProcessError as error:
            print(json.dumps(utils.generic_error(f'remote upload failed')))
        except RuntimeError as error:
            print(json.dumps(utils.generic_error(error.args[0])))

    elif action == 'registered-restore':
        try:
            # fetch file from remote server
            data = json.load(sys.stdin)
            backup_path = '/tmp/backup.tar.gz'
            subprocess.run(['/usr/sbin/remote-backup', 'download', data['file'], backup_path],
                           check=True, capture_output=True)
            # fetch completed successfully, restore system
            restore_backup(backup_path, None)
            # restore successful, restart the system
            subprocess.run(['/sbin/reboot'], check=True, capture_output=True)
            # reboot takes a few seconds to complete, enough to send the response
            print(json.dumps({'message': 'success'}))
        except subprocess.CalledProcessError as error:
            print(json.dumps(utils.generic_error('remote backup download failed')))
        except KeyError as error:
            print(json.dumps(utils.validation_error('file', 'required')))
        except RuntimeError as error:
            print(json.dumps(utils.generic_error(error.args[0])))

    elif action == 'registered-download-backup':
        os.makedirs(DOWNLOAD_PATH, exist_ok=True)
        try:
            # fetch file from remote server
            data = json.load(sys.stdin)
            file_name = generate_random_file_name()
            backup_path = f'{DOWNLOAD_PATH}{file_name}'
            subprocess.run(['/usr/sbin/remote-backup', 'download', data['file'], backup_path],
                           check=True, capture_output=True)
            # return content
            print(json.dumps({'backup': file_name}))
        except subprocess.CalledProcessError as error:
            print(json.dumps(utils.generic_error('remote backup download failed')))
        except KeyError as error:
            print(json.dumps(utils.validation_error('file', 'required')))

    elif action == 'is-passphrase-set':
        print(json.dumps({'values': {'set': os.path.exists(PASSPHRASE_PATH)}}))
