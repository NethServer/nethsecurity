#!/usr/bin/python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# Manage packages and system updates

import os
import sys
import json
import time
import subprocess
import requests
from nethsec import utils
from urllib.parse import urlparse
from euci import EUci

# Utilities

def last_package_check():
    try:
        if not os.listdir("/tmp/opkg-lists/"):
            return 0
        return int(os.path.getmtime("/tmp/opkg-lists/"))
    except:
        return 0

def get_system_version():
    with open('/etc/os-release', 'r') as f:
        for line in f.readlines():
            if line.startswith("VERSION"):
                return line[line.index('=')+2:-2]
    return ''


def get_update_schedule():
    try:
        p = subprocess.run(["/usr/libexec/ns-api/schedule-system-update", "check"], check=True, capture_output=True, text=True)
        return int(p.stdout.strip())
    except:
        return -1

def get_distfeed_channel():
    with open('/etc/opkg/distfeeds.conf', 'r') as f:
        for line in f.readlines():
            try:
                (rtype, rname, url) = line.split(" ")
                path = urlparse(url).path[1:] # strip first /
                return path[0:path.index('/')]
            except:
                continue
    return 'stable'

# APIs

def check_package_updates():
    ret = []
    try:
        # download metadata only if they are older than 5 minutes
        if (time.time() - last_package_check()) > 300:
            subprocess.run(["/bin/opkg", "update"], check=True, capture_output=True)
    except Exception as e:
        print(e, file=sys.stderr)
        return utils.generic_error("opkg_update_failed")
    p = subprocess.run(["/bin/opkg", "list-upgradable"], check=True, capture_output=True, text=True)
    for line in p.stdout.split("\n"):
        if not line:
            continue
        tmp = line.split(" - ")
        ret.append({"package": tmp[0], "currentVersion": tmp[1], "latestVersion": tmp[2]})
    # Sort the ret array by the "package" field
    ret.sort(key=lambda package: package["package"])
    return {"updates": ret}

def get_package_updates_lat_check():
    return {"lastCheck": last_package_check()}

def install_package_updates():
    try:
        out = subprocess.check_output("/usr/sbin/screen -dmS install_package_updates /usr/sbin/update-packages", shell=True)
    except Exception as e:
        print(e, file=sys.stderr)
        return utils.generic_error("opkg_ugrade_failed")
    return {"result": "success"}

def check_system_update():
    e_uci = EUci()
    current_version = get_system_version()
    data = {"currentVersion": f'NethSecurity {current_version}', "lastVersion": "", "scheduledAt": get_update_schedule()}
    url = e_uci.get('ns-plug', 'config', 'repository_url', default=None)
    if url is None:
        return utils.generic_error("repository_url_not_set")
    if e_uci.get('ns-plug', 'config', 'system_id', default=None) is None:
        url = f"{url}/{get_distfeed_channel()}"
    try:
        response = requests.get(f"{url}/latest_release", headers={"Accept": "application/json"}, timeout=5)
        response.raise_for_status()
        version = response.text.strip()
        if current_version != version:
            data["lastVersion"] = f'NethSecurity {version}'
    except requests.exceptions.ConnectionError:
        return utils.generic_error("connection_error")
    except requests.exceptions.RequestException as e:
        match e.response.status_code:
            case requests.codes.service_unavailable:
                return utils.generic_error("maintenance")
            case requests.codes.unauthorized:
                return utils.generic_error("unauthorized")
            case _:
                return utils.generic_error("server_error")
    except Exception:
        return utils.generic_error("generic_error")

    return data

def schedule_system_update(timestamp):
    if timestamp < 0:
        try:
            subprocess.run(["/usr/libexec/ns-api/schedule-system-update", "remove"], check=True)
        except Exception as e:
            print(e, file=sys.stderr)
            return utils.generic_error("update_schedule_not_removed")
    else: 
        try:
            subprocess.run(["/usr/libexec/ns-api/schedule-system-update", "add", f'{timestamp}'], check=True)
        except Exception as e:
            print(e, file=sys.stderr)
            return utils.generic_error("update_not_scheduled")
    return {"result": "success"}

def update_system():
    try:
        subprocess.run(["/usr/sbin/screen", "-dmS", "ns-upgrade", "/usr/sbin/ns-upgrade"], check=True, capture_output=True)
    except:
        return utils.generic_error("update_failed")
    return {"result": "success"}

def install_uploaded_image(image):
    image = f'/var/run/ns-api-server/uploads/{image}'
    if not os.path.exists(image):
        return utils.generic_error("uploaded_file_not_found")

    try:
        subprocess.run(["/sbin/sysupgrade", "-T", image], check=True, capture_output=True)
    except Exception as e:
        print(e, file=sys.stderr)
        return utils.generic_error("uploaded_file_not_valid")

    try:
        subprocess.run(["/sbin/sysupgrade", "-k", "-q", image], check=True, capture_output=True)
    except Exception as e:
        print(e, file=sys.stderr)
        return utils.generic_error("sysupgrade_faled")
    # The server is too quick: this success result probably will never reach the client.
    return {"result": "success"}

def get_automatic_updates_status():
    try:
        p = subprocess.run(["/usr/libexec/ns-api/schedule-automatic-updates", "check"], check=True, capture_output=True, text=True)
        return {"enabled": True}
    except:
        return {"enabled": False}

def set_automatic_updates(status):
    if status:
        action = "add"
    else:
        action = "remove"
    try:
        p = subprocess.run(["/usr/libexec/ns-api/schedule-automatic-updates", action], check=True, capture_output=True, text=True)
        return {"result": "success"}
    except:
        return utils.generic_error("set_automatic_updates_failed")

cmd = sys.argv[1]

if cmd == "list":
    print(
        json.dumps(
            {
                "check-package-updates": {},
                "get-package-updates-last-check": {},
                "get-automatic-updates-status": {},
                "install-package-updates": {},
                "check-system-update": {},
                "schedule-system-update": {"scheduleAt": 1699615827},
                "update-system": {},
                "install-uploaded-image": {
                    "image": "uploaded-xxxx"
                },
                "set-automatic-updates": {"enable": True}
            }
        )
    )
elif cmd == "call":
    action = sys.argv[2]
    if action == "check-package-updates":
        ret = check_package_updates()
    elif action == "get-package-updates-last-check":
        ret = get_package_updates_lat_check()
    elif action == "get-automatic-updates-status":
        ret = get_automatic_updates_status()
    elif action == "install-package-updates":
        ret = install_package_updates()
    elif action == "check-system-update":
        ret = check_system_update()
    elif action == "set-automatic-updates":
        args = json.loads(sys.stdin.read())
        ret = set_automatic_updates(args["enable"])
    elif action == "schedule-system-update":
        args = json.loads(sys.stdin.read())
        ret = schedule_system_update(args["scheduleAt"])
        # ping the controller to refresh the system update schedule
        try:
            subprocess.run(["/usr/sbin/ns-controller-push-info"], capture_output=True)
        except:
            pass
    elif action == "update-system":
        ret = update_system()
    elif action == "install-uploaded-image":
        args = json.loads(sys.stdin.read())
        ret = install_uploaded_image(args["image"])
    print(json.dumps(ret))
