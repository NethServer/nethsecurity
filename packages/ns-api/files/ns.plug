#!/usr/bin/python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# Manage registration to the controller

import re
import os
import sys
import json
import uuid
import base64
from nethsec import utils, firewall
from euci import EUci
import subprocess
from datetime import datetime

def get_hostname():
    with open('/proc/sys/kernel/hostname', 'r') as fp:
        return fp.read().strip()


def find_last_sent():
    search_pattern = r"USER root pid \d+ cmd /usr/bin/ns-push-reports"
    log_file = "/var/log/messages"

    try:
        with open(log_file, 'r') as file:
            for line in reversed(file.readlines()):
                if re.search(search_pattern, line):
                    date_str = line.split()[0:3]
                    current_year = datetime.now().year
                    timestamp_str = f"{current_year} {' '.join(date_str)}"
                    return int(datetime.strptime(timestamp_str, "%Y %b %d %H:%M:%S").timestamp())
    except Exception:
        pass

    return -1

def status():
    u = EUci()
    server = u.get("ns-plug", "config", "server", default=None)
    unit_name = u.get("ns-plug", "config", "unit_name", default=get_hostname())
    description = u.get("ns-plug", "config", "description", default='')
    unit_id = u.get("ns-plug", "config", "unit_id", default='')
    tls_verify = u.get("ns-plug", "config", "tls_verify", default="1") == "1"
    subscription = u.get("ns-plug", "config", "type", default="")
    address = None
    last_sent = -1
    if not server:
        return {
                "status": "unregistered",
                "address": address,
                "server": server,
                "unit_name": unit_name,
                "unit_id": unit_id,
                "tls_verify": tls_verify,
                "push_status": "disabled",
                "push_last_sent": last_sent,
                "description": description
            }

    # if tun-plug is present
    if os.path.exists("/usr/share/ns-plug/client.conf"):
        try:
            p = subprocess.run(["/sbin/ip", "-j", "address", "show", "dev", "tun-nsplug"], check=True, capture_output=True, text=True)
            data = json.loads(p.stdout)
            address = data[0].get('addr_info')[0].get('local')
        except:
            status = "pending"
    else:
        status = "pending"
    if address is not None:
        status = "connected"
    if subscription:
        last_sent = find_last_sent()
    return {
            "status": status,
            "address": address,
            "server": server,
            "unit_name": unit_name,
            "unit_id": unit_id,
            "tls_verify": tls_verify,
            "push_status": "enabled" if subscription else "disabled",
            "push_last_sent": last_sent,
            "description": description
        }

def register(join_code, tls_verify, unit_name, description):
    u = EUci()
    try:
        config = json.loads(base64.b64decode(join_code).decode('utf-8'))
    except:
        return utils.generic_error("join_code_decode_failed")

    u.set("ns-plug", "config", "unit_id", config["unit_id"])
    u.set("ns-plug", "config", "server", "https://"+config["fqdn"])
    u.set("ns-plug", "config", "token", config["token"])
    if not unit_name:
        unit_name = get_hostname()
    u.set("ns-plug", "config", "unit_name", unit_name)
    u.set("ns-plug", "config", "description", description)
    if tls_verify:
        u.set("ns-plug", "config", "tls_verify", "1")
    else:
        u.set("ns-plug", "config", "tls_verify", "0")
    u.commit("ns-plug")
    try:
        subprocess.run(['/etc/init.d/ns-plug', 'restart'], check=True, capture_output=True)
    except:
        return utils.generic_error("failed_to_restart_ns-plug")
    firewall.add_device_to_lan(u, "tun-nsplug")
    u.commit('firewall')
    try:
        subprocess.run(['/etc/init.d/firewall', 'reload'], check=True, capture_output=True)
    except:
        return utils.generic_error("failed_to_reload_firewall")
    return {"result": "success"}


def unregister():
    u = EUci()
    u.set("ns-plug", "config", "server", "")
    u.set("ns-plug", "config", "unit_name", "")
    u.commit("ns-plug")
    u.commit("rpcd")
    u.delete("rsyslog", "promtail")
    u.commit("rsyslog")
    try:
        os.unlink("/usr/share/ns-plug/client.conf")
    except:
        pass
    try:
        subprocess.run(['/etc/init.d/ns-plug', 'restart'], check=True, capture_output=True)
    except:
        return utils.generic_error("failed_to_restart_ns-plug")
    # Disable sending of FQDN, no matter if it fails
    subprocess.run("sed -i '/^\\$PreserveFQDN on$/d' /etc/rsyslog.conf", shell=True, capture_output=True)
    # Disable sending data to the controller
    subprocess.run("sed -i '/ns-push-reports/d' /etc/crontabs/root", shell=True, capture_output=True)
    subprocess.run(["/etc/init.d/cron", "restart"], shell=True, capture_output=True)

    try:
        subprocess.run(['/etc/init.d/rsyslog', 'restart'], check=True, capture_output=True)
    except:
        return utils.generic_error("failed_to_restart_rsyslog")
    firewall.remove_device_from_zone(u, "tun-nsplug", "lan")
    u.commit('firewall')
    try:
        subprocess.run(['/etc/init.d/firewall', 'reload'], check=True, capture_output=True)
    except:
        return utils.generic_error("failed_to_reload_firewall")
    return {"result": "success"}

cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({
        "register": {"join_code": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "tls_verify": False, "unit_name": "fw.test.local", "description": "my unit"},
        "unregister": {},
        "status":{},
        "restart": {}
        }))
else:
    action = sys.argv[2]
    if action == "register":
        args = json.loads(sys.stdin.read())
        ret = register(args["join_code"], args["tls_verify"], args["unit_name"], args.get("description", ""))
    elif action == "status":
        ret = status()
    elif action == "unregister":
        ret = unregister()
    elif action == "restart":
        ret = {"result": "success"}
        try:
            subprocess.run(['/etc/init.d/ns-plug', 'restart'], check=True, capture_output=True)
        except:
            ret = utils.generic_error("restart_failed")

    print(json.dumps(ret))
