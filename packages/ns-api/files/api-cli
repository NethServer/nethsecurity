#!/usr/bin/python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import sys
import ssl
import json
import argparse
from urllib.parse import urlencode
from urllib.request import Request, urlopen

def send_request(url, data):
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    postdata = json.dumps(data).encode()
    headers = {"Content-Type": "application/json; charset=UTF-8"}
    httprequest = Request(url, data=postdata, method="POST", headers=headers)

    with urlopen(httprequest, context=ctx) as response:
        return json.loads(response.read().decode())

def auth(user, password):
    data = {
        "id": 1,
        "jsonrpc": "2.0",
        "method": "call",
        "params": [
            "00000000000000000000000000000000",
            "session",
            "login",
            { "username": user, "password": password }
        ]
    }

    resp = send_request(url, data)
    try:
        return resp['result'][1]['ubus_rpc_session']
    except:
        return None

def call_api(session, path, method, params=dict()):
    data = {
        "id": 1,
        "jsonrpc": "2.0",
        "method": "call",
        "params": [
            session,
            path,
            method,
            params
        ]
    }

    return send_request(url, data)


parser = argparse.ArgumentParser()
parser.add_argument("path", help="API path")
parser.add_argument("method", help="API method")
parser.add_argument("-U", "--user", help="Use given user for login. Default is: root", default='root')
parser.add_argument("-P", "--password", help="Use given password for log. Default is: Nethesis,1234", default='Nethesis,1234')
parser.add_argument("-u", "--url", help="API url", default='https://localhost/ubus')
parser.add_argument("-d", "--data",  help="Add parameters in JSON format to API cal, syntax example: '{\"param1\": \"value1\"}'")
args = parser.parse_args()
url = args.url

try:
    params = json.loads(args.data)
except:
    params = dict()

session = auth(args.user, args.password)
if not session:
    print("Bad authentication")
    sys.exit(1)
response = call_api(session, args.path, args.method, params)
print(json.dumps(response['result'][1]))
