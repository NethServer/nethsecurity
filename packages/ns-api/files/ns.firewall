#!/usr/bin/python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# List firewall rules

import json
import sys

from euci import EUci
from nethsec import utils, firewall, objects

cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({
        'list-forward-rules': {},
        'list-output-rules': {},
        'list-input-rules': {},
        'list-service-suggestions': {},
        'list-host-suggestions': {},
        'list-object-suggestions': {},
        'list_zones': {},
        'list_zones_no_aliases': {},
        'list_forwardings': {},
        'add-rule': {
            "name": "r1",
            "src": "lan",
            "src_ip": [],
            "dest": "wan",
            "dest_ip": ["1.2.3.4"],
            "proto": ["tcp"],
            "dest_port": "22",
            "target": "ACCEPT",
            "ns_service": "ssh",
            "enabled": True,
            "log": False,
            "ns_tag": [],
            "add_to_top": False,
            "ns_src": "database/id",
            "ns_dst": "database/id"
        },
        'edit-rule': {
            "id": "ns_1234",
            "name": "r1",
            "src": "lan",
            "src_ip": [],
            "dest": "wan",
            "dest_ip": ["1.2.3.4"],
            "proto": ["tcp"],
            "dest_port": "22",
            "target": "ACCEPT",
            "ns_service": "",
            "enabled": True,
            "log": False,
            "ns_tag": [],
            "add_to_top": False,
            "ns_src": "database/id",
            "ns_dst": "database/id"
        },
        'delete-rule': { "id": "ns_1234" },
        'enable-rule': { "id": "ns_1234" },
        'disable-rule': { "id": "ns_1234" },
        'order-rules': { "type": "forward", "order": ["ns_1234", "ns_456"] },
        'create_zone': {
            'name': 'String',
            'input': 'String',
            'forward': 'String',
            'traffic_to_wan': 'Boolean',
            'forwards_to': 'Array',
            'forwards_from': 'Array',
            'log': 'Boolean',
        },
        'edit_zone': {
            'name': 'String',
            'input': 'String',
            'forward': 'String',
            'traffic_to_wan': 'Boolean',
            'forwards_to': 'Array',
            'forwards_from': 'Array',
            'log': 'Boolean',
        },
        'delete_zone': {
            'config_name': 'String'
        }
    }))
elif cmd == 'call':
    try:
        action = sys.argv[2]
        e_uci = EUci()
        if action == 'list-forward-rules':
            print(json.dumps({'rules': firewall.list_forward_rules(e_uci)}))
        elif action == 'list-output-rules':
            print(json.dumps({'rules': firewall.list_output_rules(e_uci)}))
        elif action == 'list-input-rules':
            print(json.dumps({'rules': firewall.list_input_rules(e_uci)}))
        elif action == 'list-service-suggestions':
            print(json.dumps({'services': firewall.list_service_suggestions()}))
        elif action == 'list-host-suggestions':
            print(json.dumps({'hosts': firewall.list_host_suggestions(e_uci)}))
        elif action == 'list-object-suggestions':
            print(json.dumps({'objects': objects.list_objects(e_uci)}))
        elif action == "add-rule":
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.add_rule(
                    e_uci,
                    data['name'],
                    data['src'],
                    data['src_ip'],
                    data['dest'],
                    data['dest_ip'],
                    data['proto'],
                    data['dest_port'],
                    data['target'],
                    data['ns_service'],
                    data['enabled'],
                    data['log'],
                    data['ns_tag'],
                    data['add_to_top'],
                    data.get('ns_src'),
                    data.get('ns_dst')
            )
            print(json.dumps({"id": ret}))
        elif action == "edit-rule":
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.edit_rule(
                    e_uci,
                    data['id'],
                    data['name'],
                    data['src'],
                    data['src_ip'],
                    data['dest'],
                    data['dest_ip'],
                    data['proto'],
                    data['dest_port'],
                    data['target'],
                    data['ns_service'],
                    data['enabled'],
                    data['log'],
                    data['ns_tag'],
                    data.get('ns_src'),
                    data.get('ns_dst')
            )
            print(json.dumps({"id": ret}))
        elif action == "delete-rule":
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.delete_rule(e_uci, data['id'])
            print(json.dumps({"message": "success"}))
        elif action == "enable-rule":
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.enable_rule(e_uci, data['id'])
            print(json.dumps({"message": "success"}))
        elif action == "disable-rule":
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.disable_rule(e_uci, data['id'])
            print(json.dumps({"message": "success"}))
        elif action == "order-rules":
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.order_rules(e_uci, data['type'], data['order'])
            print(json.dumps({"message": "success"}))
        elif action == 'list_zones':
            print(json.dumps(firewall.list_zones(e_uci)))
        elif action == 'list_zones_no_aliases':
            print(json.dumps(firewall.list_zones_no_aliases(e_uci)))
        elif action == 'list_forwardings':
            print(json.dumps(firewall.list_forwardings(e_uci)))
        elif action == 'create_zone':
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.add_zone(e_uci,
                              data['name'],
                              data['input'],
                              data['forward'],
                              data['traffic_to_wan'],
                              data['forwards_to'],
                              data['forwards_from'],
                              data.get('log', False)
                              )

            if type(ret) is tuple:
                # success
                print(json.dumps({"message": "success"}))
            else:
                # validation error
                print(json.dumps(ret))
        elif action == 'edit_zone':
            data = json.JSONDecoder().decode(sys.stdin.read())
            ret = firewall.edit_zone(e_uci,
                              data['name'],
                              data['input'],
                              data['forward'],
                              data['traffic_to_wan'],
                              data['forwards_to'],
                              data['forwards_from'],
                              data.get('log', False)
                              )

            if type(ret) is tuple:
                # success
                print(json.dumps({"message": "success"}))
            else:
                # validation error
                print(json.dumps(ret))
        elif action == 'delete_zone':
            zone_name = json.JSONDecoder().decode(sys.stdin.read())['config_name']
            firewall.delete_zone(e_uci, zone_name)
            print(json.dumps({"message": "success"}))

    except utils.ValidationError as ex:
        print(json.dumps(utils.validation_error(ex.parameter, ex.message, ex.value)))
    except json.JSONDecodeError:
       print(json.dumps({"error": "json given is invalid"}))
