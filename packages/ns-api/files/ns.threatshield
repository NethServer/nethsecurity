#!/usr/bin/python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import os
import sys
import base64
import json
import urllib
import urllib.request
import urllib.error
from euci import EUci
from nethsec.utils import ValidationError
from nethsec import utils
import base64
import time
import subprocess

## Utilities

def has_bl_entitlement(e_uci):
    cache_file = "/tmp/bl_entitlement_cache"
    cache_timeout = 3600 * 6 # 6 hours

    # Check if cache file exists and if it is still valid
    if os.path.exists(cache_file) and time.time() - os.path.getmtime(cache_file) < cache_timeout:
        with open(cache_file, 'r') as f:
            return f.read() == "True"

    system_id = e_uci.get('ns-plug', 'config', 'system_id', default='')
    secret = e_uci.get('ns-plug', 'config', 'secret', default='')
    type = e_uci.get('ns-plug', 'config', 'type', default='')
    url = f'https://bl.nethesis.it/plain/{type}/nethesis-blacklists/whitelist.global'
    auth_string = f"{system_id}:{secret}".encode("utf-8")
    auth_header = f"Basic {base64.b64encode(auth_string).decode('utf-8')}"
    headers = {
        "Accept": "application/json",
        "Authorization": auth_header,
    }
    try:
        req = urllib.request.Request(url, headers=headers)
        response = urllib.request.urlopen(req, timeout=20)  # Add timeout of 20 seconds
    except urllib.error.URLError as e:
        return False

    has_bl = response.status == 200

    # Cache the result in the file
    with open(cache_file, 'w') as f:
        f.write(str(has_bl))

    return has_bl

def list_feeds():
    if os.path.exists('/etc/banip/banip.custom.feeds') and os.path.getsize('/etc/banip/banip.custom.feeds') > 0:
        with open('/etc/banip/banip.custom.feeds') as f:
            return json.loads(f.read())
    else:
        with open('/etc/banip/banip.feeds') as f:
            return json.loads(f.read())


def get_block_list():
    return get_allow_list('/etc/banip/banip.blocklist')


def get_allow_list(file='/etc/banip/banip.allowlist'):
    ret = []
    try:
        with open(file) as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                parts = line.split('#')
                if len(parts) > 1:
                    ret.append({ "address": parts[0].strip(), "description": parts[1].strip() })
                else:
                    ret.append({ "address": parts[0].strip(), "description": '' })
    except:
        return []
    return ret

def write_allow_list(allow_list, file='/etc/banip/banip.allowlist'):
    with open(file, 'w') as f:
        for x in allow_list:
            f.write(x['address'])
            if x['description']:
                f.write(' #' + x['description'])
            f.write('\n')
    subprocess.run(["/etc/init.d/banip", "reload"], capture_output=True)


def write_block_list(block_list):
    write_allow_list(block_list, '/etc/banip/banip.blocklist')


def list_dns_feeds():
    # Decompress and read the JSON file /etc/adblock/combined.sources.gz
    sources = '/etc/adblock/combined.sources.gz'
    if os.path.exists(sources) and os.path.getsize(sources) > 0:
        data = subprocess.run(["gunzip", "-c", sources], capture_output=True).stdout
        return json.loads(data)
    else:
        return {}

def get_confidence(f):
    confidence = -1
    if f.endswith('lvl1') or f.endswith('level1'):
        confidence = 10
    elif f.endswith('lvl2') or f.endswith('level2'):
        confidence = 8
    elif f.endswith('lvl3') or f.endswith('level3'):
        confidence = 6
    elif f.endswith('lvl4') or f.endswith('level4'):
        confidence = 5
    return confidence

## APIs

def list_blocklist(e_uci):
    ret = []
    feeds = list_feeds()
    has_bl = has_bl_entitlement(e_uci)
    try:
        enabled_feeds = list(e_uci.get_all('banip', 'global', 'ban_feed'))
    except:
        enabled_feeds = []
    for f in feeds:
        feed = feeds[f]
        enabled = f in enabled_feeds

        if 'nethesis-blacklists' in feed.get('url_4'):
            type = 'enterprise'
        else:
            type = 'community'

        # list enabled enterprise lists, even if there is no Internet connection
        if not enabled:
            if type == 'enterprise' and not has_bl:
                continue

        ret.append({ 'name': f, 'type': type, 'enabled': enabled, 'confidence': get_confidence(f), 'description': feed.get('descr')})
    return { "data": ret }

def list_settings(e_uci):
    return {
        'data': {
            'enabled': e_uci.get('banip', 'global', 'ban_enabled') == '1',
            'ban_logprerouting': e_uci.get('banip', 'global', 'ban_logprerouting', default=False) == '1',
            'ban_loginput': e_uci.get('banip', 'global', 'ban_loginput', default=False) == '1',
            'ban_logforwardwan': e_uci.get('banip', 'global', 'ban_logforwardwan', default=False) == '1',
            'ban_logforwardlan': e_uci.get('banip', 'global', 'ban_logforwardlan', default=False) == '1',
            'ban_loglimit': True if int(e_uci.get('banip', 'global', 'ban_loglimit', default=100)) > 0 else False,
            'ban_logcount': e_uci.get('banip', 'global', 'ban_logcount', default=1),
            'ban_logterm': e_uci.get('banip', 'global', 'ban_logterm', list=True, default=[]),
            'ban_icmplimit': True if int(e_uci.get('banip', 'global', 'ban_icmplimit', default=10)) > 0 else False,
            'ban_synlimit': True if int(e_uci.get('banip', 'global', 'ban_synlimit', default=10)) > 0 else False,
            'ban_udplimit': True if int(e_uci.get('banip', 'global', 'ban_udplimit', default=100)) > 0 else False,
            'ban_nftexpiry': e_uci.get('banip', 'global', 'ban_nftexpiry', default='30m')
        }
    }

def edit_blocklist(e_uci, payload):
    feeds = list_feeds()
    try:
        enabled = list(e_uci.get_all('banip', 'global', 'ban_feed'))
    except:
        enabled = []
    if payload['enabled'] and payload['blocklist'] not in enabled:
        enabled.append(payload['blocklist'])
    if not payload['enabled'] and payload['blocklist'] in enabled:
        enabled.remove(payload['blocklist'])
    e_uci.set('banip', 'global', 'ban_feed', enabled)
    e_uci.save('banip')
    return {'message': 'success'}

def set_default(e_uci, option, value):
    try:
        e_uci.get('banip', 'global', option)
    except:
        e_uci.set('banip', 'global', option, value)

def edit_settings(e_uci, payload):
    if 'enabled' not in payload:
        raise ValidationError('enabled', 'required')
    if not isinstance(payload['enabled'], bool):
        raise ValidationError('enabled', 'invalid', payload['enabled'])

    if payload['enabled']:
        # validate all other payload options
        if 'ban_logprerouting' not in payload:
            raise ValidationError('ban_logprerouting', 'required')
        if not isinstance(payload['ban_logprerouting'], bool):
            raise ValidationError('ban_logprerouting', 'invalid', payload['ban_logprerouting'])
        if 'ban_loginput' not in payload:
            raise ValidationError('ban_loginput', 'required')
        if not isinstance(payload['ban_loginput'], bool):
            raise ValidationError('ban_loginput', 'invalid', payload['ban_loginput'])
        if 'ban_logforwardwan' not in payload:
            raise ValidationError('ban_logforwardwan', 'required')
        if not isinstance(payload['ban_logforwardwan'], bool):
            raise ValidationError('ban_logforwardwan', 'invalid', payload['ban_logforwardwan'])
        if 'ban_logforwardlan' not in payload:
            raise ValidationError('ban_logforwardlan', 'required')
        if not isinstance(payload['ban_logforwardlan'], bool):
            raise ValidationError('ban_logforwardlan', 'invalid', payload['ban_logforwardlan'])
        if 'ban_icmplimit' not in payload:
            raise ValidationError('ban_icmplimit', 'required')
        if not isinstance(payload['ban_icmplimit'], bool):
            raise ValidationError('ban_icmplimit', 'invalid', payload['ban_icmplimit'])
        if 'ban_synlimit' not in payload:
            raise ValidationError('ban_synlimit', 'required')
        if not isinstance(payload['ban_synlimit'], bool):
            raise ValidationError('ban_synlimit', 'invalid', payload['ban_synlimit'])
        if 'ban_udplimit' not in payload:
            raise ValidationError('ban_udplimit', 'required')
        if not isinstance(payload['ban_udplimit'], bool):
            raise ValidationError('ban_udplimit', 'invalid', payload['ban_udplimit'])
        if 'ban_loglimit' not in payload:
            raise ValidationError('ban_loglimit', 'required')
        if not isinstance(payload['ban_loglimit'], bool):
            raise ValidationError('ban_loglimit', 'invalid', payload['ban_loglimit'])

        if payload['ban_loglimit']:
            if 'ban_logcount' not in payload:
                raise ValidationError('ban_logcount', 'required')
            if not isinstance(payload['ban_logcount'], int):
                raise ValidationError('ban_logcount', 'invalid', payload['ban_logcount'])
            if 'ban_logterm' not in payload:
                raise ValidationError('ban_logterm', 'required')
            if not isinstance(payload['ban_logterm'], list):
                raise ValidationError('ban_logterm', 'invalid', payload['ban_logterm'])
            if 'ban_nftexpiry' not in payload:
                raise ValidationError('ban_nftexpiry', 'required')
            if not isinstance(payload['ban_nftexpiry'], str):
                raise ValidationError('ban_nftexpiry', 'invalid', payload['ban_nftexpiry'])

        # Validation completed, set the values
        e_uci.set('banip', 'global', 'ban_enabled', '1')
        set_default(e_uci, 'ban_fetchcmd', 'curl')
        set_default(e_uci, 'ban_protov4', '1')
        set_default(e_uci, 'ban_protov6', '1')

        e_uci.set('banip', 'global', 'ban_logprerouting', payload['ban_logprerouting'])
        e_uci.set('banip', 'global', 'ban_loginput', payload['ban_loginput'])
        e_uci.set('banip', 'global', 'ban_logforwardwan', payload['ban_logforwardwan'])
        e_uci.set('banip', 'global', 'ban_logforwardlan', payload['ban_logforwardlan'])
        e_uci.set('banip', 'global', 'ban_loglimit', 100 if payload['ban_loglimit'] else 0)

        e_uci.set('banip', 'global', 'ban_icmplimit', 10 if payload['ban_icmplimit'] else 0)
        e_uci.set('banip', 'global', 'ban_synlimit', 10 if payload['ban_synlimit'] else 0)
        e_uci.set('banip', 'global', 'ban_udplimit', 100 if payload['ban_udplimit'] else 0)

        if payload['ban_loglimit']:
            e_uci.set('banip', 'global', 'ban_logcount', payload['ban_logcount'])
            e_uci.set('banip', 'global', 'ban_logterm', payload['ban_logterm'])
            e_uci.set('banip', 'global', 'ban_nftexpiry', payload['ban_nftexpiry'])
    else:
        e_uci.set('banip', 'global', 'ban_enabled', '0')

    e_uci.save('banip')
    return {'message': 'success'}

def list_allowed():
    return { "data": get_allow_list() }


def list_blocked():
    return {"data": get_block_list()}

def add_allowed(payload):
    cur = get_allow_list()
    # extract address from cur list
    if payload['address'] in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_already_present', payload['address'])
    cur.append({ "address": payload['address'], "description": payload['description'] })
    write_allow_list(cur)
    return {'message': 'success'}


def add_blocked(payload):
    cur = get_block_list()
    if payload['address'] in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_already_present', payload['address'])
    cur.append({"address": payload['address'], "description": payload['description']})
    write_block_list(cur)
    return {'message': 'success'}


def delete_allowed(payload):
    cur = get_allow_list()
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    # remove address from cur list
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            del cur[i]
            break
    write_allow_list(cur)
    return {'message': 'success'}


def delete_blocked(payload):
    cur = get_block_list()
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    # remove address from cur list
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            del cur[i]
            break
    write_block_list(cur)
    return {'message': 'success'}


def edit_allowed(payload):
    cur = get_allow_list()
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            cur[i]['description'] = payload['description']
            break
    write_allow_list(cur)
    return {'message': 'success'}


def edit_blocked(payload):
    cur = get_block_list()
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            cur[i]['description'] = payload['description']
            break
    write_block_list(cur)
    return {'message': 'success'}


def dns_list_blocklist(e_uci):
    ret = []
    feeds = list_dns_feeds()
    has_bl = has_bl_entitlement(e_uci)
    try:
        enabled_feeds = list(e_uci.get_all('adblock', 'global', 'adb_sources'))
    except:
        enabled_feeds = []
    for f in feeds:
        feed = feeds[f]
        enabled = f in enabled_feeds

        if 'nethesis-blacklists' in feed.get('url'):
            type = 'enterprise'
        else:
            type = 'community'

        # list enabled enterprise lists, even if there is no Internet connection
        if not enabled:
            if type == 'enterprise' and not has_bl:
                continue

        ret.append({ 'name': f, 'type': type, 'enabled': enabled, 'confidence': get_confidence(f), 'description': feed.get('focus')})
    return { "data": ret }

def dns_edit_blocklist(e_uci, payload):
    feeds = list_dns_feeds()
    try:
        enabled = list(e_uci.get_all('adblock', 'global', 'adb_sources'))
    except:
        enabled = []
    if payload['enabled'] and payload['blocklist'] not in enabled:
        enabled.append(payload['blocklist'])
    if not payload['enabled'] and payload['blocklist'] in enabled:
        enabled.remove(payload['blocklist'])
    e_uci.set('adblock', 'global', 'adb_sources', enabled)
    e_uci.save('adblock')
    return {'message': 'success'}

def dns_list_settings(e_uci):
    try:
        zones = list(e_uci.get('adblock', 'global', 'adb_zonelist'))
    except:
        zones = []
    return { 'data': {'enabled': e_uci.get('adblock', 'global', 'ts_enabled') == '1', "zones": zones} }

def dns_edit_settings(e_uci, payload):
    if payload['enabled']:
        e_uci.set('adblock', 'global', 'ts_enabled', '1')
        e_uci.set('adblock', 'global', 'adb_enabled', '1')
        e_uci.set('adblock', 'global', 'adb_backup', '1')
        e_uci.set('adblock', 'global', 'adb_forcedns', '1')
        e_uci.set('adblock', 'global', 'adb_zonelist', payload.get('zones', ['lan']))
        try:
            e_uci.get('adblock', 'global', 'adb_portlist')
        except:
            e_uci.set('adblock', 'global', 'adb_portlist', ['53', '853'])
    else:
        e_uci.set('adblock', 'global', 'ts_enabled', '0')
        e_uci.set('adblock', 'global', 'adb_enabled', '0')
        e_uci.set('adblock', 'global', 'adb_forcedns', '0')
    e_uci.save('adblock')
    return {'message': 'success'}

def dns_list_allowed():
    return { "data": get_allow_list('/etc/adblock/adblock.whitelist') }

def dns_add_allowed(payload):
    cur = get_allow_list('/etc/adblock/adblock.whitelist')
    # extract address from cur list
    if payload['address'] in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_already_present', payload['address'])
    cur.append({ "address": payload['address'], "description": payload['description'] })
    write_allow_list(cur, '/etc/adblock/adblock.whitelist')
    return {'message': 'success'}

def dns_edit_allowed(payload):
    cur = get_allow_list('/etc/adblock/adblock.whitelist')
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            cur[i]['description'] = payload['description']
            break
    write_allow_list(cur, '/etc/adblock/adblock.whitelist')
    return {'message': 'success'}

def dns_delete_allowed(payload):
    cur = get_allow_list('/etc/adblock/adblock.whitelist')
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    # remove address from cur list
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            del cur[i]
            break
    write_allow_list(cur, '/etc/adblock/adblock.whitelist')
    return {'message': 'success'}

def dns_list_bypass(e_uci):
    # adblock.global.adb_bypass
    try:
        bypass = e_uci.get_all('adblock', 'global', 'adb_bypass')
    except:
        bypass = []
    return { "data": bypass }

def dns_add_bypass(e_uci, payload):
    try:
        bypass = list(e_uci.get_all('adblock', 'global', 'adb_bypass'))
    except:
        bypass = []
    if payload['address'] in bypass:
        raise ValidationError('address', 'address_already_present', payload['address'])
    bypass.append(payload['address'])
    e_uci.set('adblock', 'global', 'adb_bypass', bypass)
    e_uci.save('adblock')
    return {'message': 'success'}

def dns_delete_bypass(e_uci, payload):
    try:
        bypass = list(e_uci.get_all('adblock', 'global', 'adb_bypass'))
    except:
        bypass = []
    if payload['address'] not in bypass:
        raise ValidationError('address', 'address_not_found', payload['address'])
    bypass.remove(payload['address'])
    e_uci.set('adblock', 'global', 'adb_bypass', bypass)
    e_uci.save('adblock')
    return {'message': 'success'}

cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({
        'list-blocklist': {},
        'edit-blocklist': { "blocklist": "blocklist_name", "enabled": True },
        'list-settings': {},
        'edit-settings': {
            'enabled': True,
            'ban_logprerouting': True,
            'ban_loginput': True,
            'ban_logforwardwan': True,
            'ban_logforwardlan': True,
            'ban_loglimit': True,
            'ban_logcount': 3,
            'ban_logterm': ['string'],
            'ban_icmplimit': True,
            'ban_synlimit': True,
            'ban_udplimit': True
        },
        'list-allowed': {},
        'add-allowed': { 'address': '1.2.3.4', 'description': 'optional' },
        'edit-allowed': { 'address': '1.2.3.4', 'description': 'optional' },
        'delete-allowed': { 'address': '1.2.3.4' },
        'list-blocked': {},
        'add-blocked': {'address': '1.2.3.4', 'description': 'optional'},
        'edit-blocked': {'address': '1.2.3.4', 'description': 'optional'},
        'delete-blocked': {'address': '1.2.3.4'},
        'dns-list-blocklist': {},
        'dns-edit-blocklist': { "blocklist": "blocklist_name", "enabled": True },
        'dns-list-settings': {},
        'dns-edit-settings': { 'enabled': True, 'zones': ["lan"] },
        'dns-list-allowed': {},
        'dns-add-allowed': { 'address': 'test.org' , 'description': 'optional'},
        'dns-edit-allowed': { 'address': 'test.org', 'description': 'optional' },
        'dns-delete-allowed' : { 'address': 'test.org' },
        'dns-list-bypass': {},
        'dns-add-bypass': { 'address': '1.2.3.4' },
        'dns-delete-bypass': { 'address': '1.2.3.4' }
    }))
elif cmd == 'call':
    action = sys.argv[2]
    e_uci = EUci()
    try:
        if action == 'list-blocklist':
            ret = list_blocklist(e_uci)
        elif action == 'edit-blocklist':
            payload = json.loads(sys.stdin.read())
            ret = edit_blocklist(e_uci, payload)
        elif action == 'list-settings':
            ret = list_settings(e_uci)
        elif action == 'edit-settings':
            payload = json.loads(sys.stdin.read())
            ret = edit_settings(e_uci, payload)
        elif action == 'list-allowed':
            ret = list_allowed()
        elif action == 'add-allowed':
            payload = json.loads(sys.stdin.read())
            ret = add_allowed(payload)
        elif action == 'edit-allowed':
            payload = json.loads(sys.stdin.read())
            ret = edit_allowed(payload)
        elif action == 'delete-allowed':
            payload = json.loads(sys.stdin.read())
            ret = delete_allowed(payload)
        elif action == 'list-blocked':
            ret = list_blocked()
        elif action == 'add-blocked':
            payload = json.loads(sys.stdin.read())
            ret = add_blocked(payload)
        elif action == 'edit-blocked':
            payload = json.loads(sys.stdin.read())
            ret = edit_blocked(payload)
        elif action == 'delete-blocked':
            payload = json.loads(sys.stdin.read())
            ret = delete_blocked(payload)

        if action == 'dns-list-blocklist':
            ret = dns_list_blocklist(e_uci)
        elif action == 'dns-edit-blocklist':
            payload = json.loads(sys.stdin.read())
            ret = dns_edit_blocklist(e_uci, payload)
        elif action == 'dns-list-settings':
            ret = dns_list_settings(e_uci)
        elif action == 'dns-edit-settings':
            payload = json.loads(sys.stdin.read())
            ret = dns_edit_settings(e_uci, payload)
        elif action == 'dns-add-allowed':
            payload = json.loads(sys.stdin.read())
            ret = dns_add_allowed(payload)
        elif action == 'dns-edit-allowed':
            payload = json.loads(sys.stdin.read())
            ret = dns_edit_allowed(payload)
        elif action == 'dns-list-allowed':
            ret = dns_list_allowed()
        elif action == 'dns-delete-allowed':
            payload = json.loads(sys.stdin.read())
            ret = dns_delete_allowed(payload)
        elif action == 'dns-list-bypass':
            ret = dns_list_bypass(e_uci)
        elif action == 'dns-add-bypass':
            payload = json.loads(sys.stdin.read())
            ret = dns_add_bypass(e_uci, payload)
        elif action == 'dns-delete-bypass':
            payload = json.loads(sys.stdin.read())
            ret = dns_delete_bypass(e_uci, payload)

        print(json.dumps(ret))
    except ValidationError as ex:
        print(json.dumps(utils.validation_error(ex.parameter, ex.message, ex.value)))
