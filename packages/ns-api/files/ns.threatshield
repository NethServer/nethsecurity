#!/usr/bin/python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import os
import sys
import base64
import json
import urllib
import urllib.request
import urllib.error
from euci import EUci
from nethsec.utils import ValidationError
from nethsec import utils
import base64
import time
import subprocess

## Utilities

def has_bl_entitlement(e_uci):
    if not has_enterprise_subscription(e_uci):
        return False

    cache_file = "/tmp/bl_entitlement_cache"
    cache_timeout = 3600 * 6 # 6 hours

    # Check if cache file exists and if it is still valid
    if os.path.exists(cache_file) and time.time() - os.path.getmtime(cache_file) < cache_timeout:
        with open(cache_file, 'r') as f:
            return f.read() == "True"

    url = "https://my.nethesis.it/auth/service/ng-blacklist"
    system_id = e_uci.get('ns-plug', 'config', 'system_id', default='')
    secret = e_uci.get('ns-plug', 'config', 'secret', default='')
    auth_string = f"{system_id}:{secret}".encode("utf-8")
    auth_header = f"Basic {base64.b64encode(auth_string).decode('utf-8')}"
    headers = {
        "Accept": "application/json",
        "Authorization": auth_header,
    }
    try:
        req = urllib.request.Request(url, headers=headers)
        response = urllib.request.urlopen(req, timeout=20)  # Add timeout of 20 seconds
    except urllib.error.URLError as e:
        return False

    has_bl = response.status == 200

    # Cache the result in the file
    with open(cache_file, 'w') as f:
        f.write(str(has_bl))

    return has_bl

def has_enterprise_subscription(e_uci):
    system_id = e_uci.get('ns-plug', 'config', 'system_id', default='')
    if system_id == '':
        return False
    if e_uci.get('ns-plug', 'config', 'type', default='') == "enterprise":
        return True
    return False

def list_feeds():
    if os.path.exists('/etc/banip/banip.custom.feeds') and os.path.getsize('/etc/banip/banip.custom.feeds') > 0:
        with open('/etc/banip/banip.custom.feeds') as f:
            return json.loads(f.read())
    else:
        with open('/etc/banip/banip.feeds') as f:
            return json.loads(f.read())

def get_allow_list():
    ret = []
    try:
        with open('/etc/banip/banip.allowlist') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                parts = line.split('#')
                if len(parts) > 1:
                    ret.append({ "address": parts[0].strip(), "description": parts[1].strip() })
                else:
                    ret.append({ "address": parts[0].strip(), "description": '' })
    except:
        return []
    return ret

def write_allow_list(allow_list):
    with open('/etc/banip/banip.allowlist', 'w') as f:
        for x in allow_list:
            f.write(x['address'])
            if x['description']:
                f.write(' #' + x['description'])
            f.write('\n')
    subprocess.run(["/etc/init.d/banip", "reload"], capture_output=True)

## APIs

def list_blocklist(e_uci):
    ret = []
    feeds = list_feeds()
    has_bl = has_bl_entitlement(e_uci)
    try:
        enabled_feeds = list(e_uci.get_all('banip', 'global', 'ban_feed'))
    except:
        enabled_feeds = []
    for f in feeds:
        feed = feeds[f]
        if f.endswith('lvl1'):
            confidence = 10
        elif f.endswith('lvl2'):
            confidence = 8
        elif f.endswith('lvl3'):
            confidence = 6
        else:
            confidence = -1
        enabled = f in enabled_feeds

        if 'bl.nethesis.it' in feed['url_4']:
            type = 'enterprise'
        else:
            type = 'community'

        # list enabled enterprise lists, even if there is no Internet connection
        if not enabled:
            if type == 'enterprise' and not has_bl:
                continue

        ret.append({ 'name': f, 'type': type, 'enabled': enabled, 'confidence': confidence, 'description': feed.get('descr')})
    return { "data": ret }

def list_settings(e_uci):
    return { 'data': {'enabled': e_uci.get('banip', 'global', 'ban_enabled') == '1' } }

def edit_blocklist(e_uci, payload):
    feeds = list_feeds()
    try:
        enabled = list(e_uci.get_all('banip', 'global', 'ban_feed'))
    except:
        enabled = []
    if payload['enabled'] and payload['blocklist'] not in enabled:
        enabled.append(payload['blocklist'])
    if not payload['enabled'] and payload['blocklist'] in enabled:
        enabled.remove(payload['blocklist'])
    e_uci.set('banip', 'global', 'ban_feed', enabled)
    e_uci.save('banip')
    return {'message': 'success'}

def edit_settings(e_uci, payload):
    if payload['enabled']:
        e_uci.set('banip', 'global', 'ban_enabled', '1')
    else:
        e_uci.set('banip', 'global', 'ban_enabled', '0')
    e_uci.save('banip')
    return {'message': 'success'}

def list_allowed():
    return { "data": get_allow_list() }

def add_allowed(payload):
    cur = get_allow_list()
    # extract address from cur list
    if payload['address'] in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_already_present', payload['address'])
    cur.append({ "address": payload['address'], "description": payload['description'] })
    write_allow_list(cur)
    return {'message': 'success'}

def delete_allowed(payload):
    cur = get_allow_list()
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    # remove address from cur list
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            del cur[i]
            break
    write_allow_list(cur)
    return {'message': 'success'}

def edit_allowed(payload):
    cur = get_allow_list()
    if payload['address'] not in [x['address'] for x in cur]:
        raise ValidationError('address', 'address_not_found', payload['address'])
    for i in range(len(cur)):
        if cur[i]['address'] == payload['address']:
            cur[i]['description'] = payload['description']
            break
    write_allow_list(cur)
    return {'message': 'success'}

cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({
        'list-blocklist': {},
        'edit-blocklist': { "blocklist": "blocklist_name", "enabled": True },
        'list-settings': { 'data': { 'enabled': True } },
        'edit-settings': { 'enabled': True },
        'list-allowed': {},
        'add-allowed': { 'address': '1.2.3.4', 'description': 'optional' },
        'edit-allowed': { 'address': '1.2.3.4', 'description': 'optional' },
        'delete-allowed': { 'address': '1.2.3.4' }
    }))
elif cmd == 'call':
    action = sys.argv[2]
    e_uci = EUci()
    try:
        if action == 'list-blocklist':
            ret = list_blocklist(e_uci)
        elif action == 'edit-blocklist':
            payload = json.loads(sys.stdin.read())
            ret = edit_blocklist(e_uci, payload)
        elif action == 'list-settings':
            ret = list_settings(e_uci)
        elif action == 'edit-settings':
            payload = json.loads(sys.stdin.read())
            ret = edit_settings(e_uci, payload)
        elif action == 'list-allowed':
            ret = list_allowed()
        elif action == 'add-allowed':
            payload = json.loads(sys.stdin.read())
            ret = add_allowed(payload)
        elif action == 'edit-allowed':
            payload = json.loads(sys.stdin.read())
            ret = edit_allowed(payload)
        elif action == 'delete-allowed':
            payload = json.loads(sys.stdin.read())
            ret = delete_allowed(payload)

        print(json.dumps(ret))
    except ValidationError as ex:
        print(json.dumps(utils.validation_error(ex.parameter, ex.message, ex.value)))
