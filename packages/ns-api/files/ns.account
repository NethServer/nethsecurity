#!/usr/bin/python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import json
import subprocess
import sys

from euci import EUci
from nethsec import utils, users

cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({
        'set-password': {
            'username': 'str',
            'password': 'str',
            'old_password': 'str',
        }
    }))
elif cmd == 'call':
    action = sys.argv[2]
    e_uci = EUci()
    if action == 'set-password':
        try:
            data = json.load(sys.stdin)
            rpcd_user_list = utils.get_all_by_type(e_uci, 'rpcd', 'login')
            user_list = utils.get_all_by_type(e_uci, 'users', 'user')
            # check if username is inside config
            if data['username'] not in [user['username'] for user in rpcd_user_list.values()]:
                raise utils.ValidationError('username', 'invalid', data['username'])

            if not users.check_old_password(data.get('username'), data.get('old_password', '')):
                raise utils.ValidationError('old_password', 'invalid_old_password')
            if users.check_old_password(data.get('username'), data.get('password', '')):
                raise utils.ValidationError('password', 'cannot_reuse_old_password')
            # if user is not root, change rpcd config
            if data['username'] != 'root':
                password_hash = users.shadow_password(data['password'])
                for user_key, user in rpcd_user_list.items():
                    if user['username'] == data['username']:
                        e_uci.set('rpcd', user_key, 'password', password_hash)
                        e_uci.save('rpcd')
                        e_uci.commit('rpcd')
                        break
                # sync password inside local users db
                for user_key, user in user_list.items():
                    is_local = users.get_database_type(e_uci, user['database']) == 'local'
                    if user['name'] == data['username'] and is_local:
                        e_uci.set('users', user_key, 'password', password_hash)
                        e_uci.save('users')
                        e_uci.commit('users')
                        break

            else:
                # otherwise, change `passwd` file using pre-existing ubus call
                subprocess.run(['ubus', 'call', 'luci', 'setPassword', json.dumps({
                    'username': data['username'],
                    'password': data['password']
                })], capture_output=True, check=True)

            print(json.dumps({'message': 'success'}))
        except KeyError as ex:
            print(json.dumps(utils.validation_error(ex.args[0], 'required')))
        except utils.ValidationError as ex:
            print(json.dumps(utils.validation_error(ex.parameter, ex.message, ex.value)))
        except subprocess.CalledProcessError as ex:
            print(json.dumps(utils.generic_error(f'subprocess {ex.cmd[0]} failed')))
