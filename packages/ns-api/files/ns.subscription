#!/usr/bin/python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# Manage the subscription to my.nethesis.it or my.nethserver.com

import sys
import json
import subprocess
from datetime import datetime
from nethsec import utils
from euci import EUci

def register(args):
    if "secret" not in args or not args["secret"]:
        return utils.validation_error("secret", "required")

    secret = args["secret"]

    try:
        subprocess.run(["/usr/sbin/register", "enterprise", secret, '5'], check=True, capture_output=True)
        return {"result": "success"}
    except:
        pass

    try:
        subprocess.run(["/usr/sbin/register", "community", secret, '5'], check=True, capture_output=True)
        return {"result": "success"}
    except:
        return utils.generic_error("invalid_secret_or_server_not_found")

def unregister():
    try:
        subprocess.run(["/usr/sbin/unregister"], check=True, capture_output=True)
        return {"result": "success"}
    except:
        return utils.generic_error("unregister_failure")

def info():
    u = EUci()
    try:
        ret = {}
        p = subprocess.run(["/usr/sbin/subscription-info", "1"], check=True, capture_output=True)
        data = json.loads(p.stdout)
    except:
        sid = u.get('ns-plug', 'config', 'system_id', default=None)
        data = {"subscription": {"valid_until": None, "status": None, "subscription_plan": {"name": '-'}}, 'id': None, "uuid": sid}

    if not data["uuid"]:
        return {"systemd_id": ""}

    active = data["subscription"]["status"] == "valid"
    try:
        date =  datetime.strptime(data["subscription"]["valid_until"], '%Y-%m-%dT%H:%M:%S.%fZ')
        expiration = int(datetime.timestamp(date))*1000
    except:
        expiration = 0
    type = u.get('ns-plug', 'config', 'type', default='')

    ret = {"server_id": data["id"], "systemd_id": data["uuid"], "plan": data["subscription"]["subscription_plan"]["name"], "expiration": expiration, "active": active, "type": type}
    return ret

cmd = sys.argv[1]

if cmd == 'list':
    print(json.dumps({"register": {"secret": "xxxx"}, "unregister": {}, "info": {}}))
elif cmd == 'call':
    action = sys.argv[2]
    if action == "register":
        args = json.loads(sys.stdin.read())
        ret = register(args)
    elif action == "unregister":
        ret = unregister()
    elif action == "info":
        ret = info()

    print(json.dumps(ret))
