#!/usr/bin/python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# Read SSH authorized keys

import os
import subprocess
import json
import sys
import ipaddress
from datetime import datetime, timedelta
from glob import glob

from nethsec import utils
from euci import EUci
from nethsec.utils import ValidationError

LOG_DIR = "/var/log/snort"

# Retrieve all non-WAN interfaces and their IP addresses
# It also return the IP address of VPN interfaces
def get_snort_homenet(uci, include_vpn=False):
    snort_homenet = []
    # load JSON from `ip` command
    snort_homenet = set()
    try:
        ip_output = subprocess.check_output(['ip', '--json', 'addr', 'show'])
        ip_data = json.loads(ip_output)
    except subprocess.CalledProcessError as e:
        print(f"Failed to execute ip command: {e}", file=sys.stderr)
        return []
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON: {e}", file=sys.stderr)
        return []
    wan_devices = utils.get_all_wan_devices(uci)
    device_ip_map = {}
    for interface in ip_data:
        ifname = interface.get('ifname')
        addr_info = interface.get('addr_info', [])
        for addr in addr_info:
            if addr.get('family') == 'inet':
                local_ip = addr.get('local')
                prefixlen = addr.get('prefixlen')
                network = ipaddress.IPv4Network(f"{local_ip}/{prefixlen}", strict=False).network_address
                device_ip_map[ifname] = f"{network}/{prefixlen}"
                break
    for device in device_ip_map:
        # exclude WAN interfaces, loopback, PPPoE and VPN interfaces
        if device in wan_devices or device == 'lo' or device.startswith('tun') or device.startswith('ipsec') or device.startswith('wg') or device.startswith('tap') or device.startswith("ppp"):
            continue
        snort_homenet.add(device_ip_map[device])

    if include_vpn:
        ipsec_tunnels = utils.get_all_by_type(uci, 'ipsec', 'tunnel')
        for tunnel in ipsec_tunnels:
            try:
                remote_subnet = list(uci.get_all('ipsec', tunnel, 'remote_subnet'))
            except:
                remote_subnet = None
            if remote_subnet:
                for network in remote_subnet:
                    snort_homenet.add(network)

        ovpn_tunnels = utils.get_all_by_type(uci, 'openvpn', 'openvpn')
        for tunnel in ovpn_tunnels:
            # skip custom config
            if not tunnel.startswith("ns_"):
                continue
            # skip road warrior servers
            if uci.get('openvpn', tunnel, 'ns_auth_mode', default='') != '':
                continue
            # skip disabled tunnels
            if uci.get('openvpn', tunnel, 'enabled', default='0') == '0':
                continue
            try:
                remote_network = list(uci.get_all('openvpn', tunnel, 'route'))
            except:
                remote_network = None
            if remote_network:
                # route has this form: '192.168.6.0 255.255.255.0'
                for network in remote_network:
                    ip, netmask = network.split()
                    addr = ipaddress.IPv4Network(f"{ip}/{netmask}", strict=False)
                    snort_homenet.add(str(addr))

    return ' '.join(list(snort_homenet))

def add_download_cron_job():
    # add download rules cron job: every night at 2:30 plus random 30 minutes
    cron_job = f"30 2 * * * sleep $((RANDOM % 1800)) && /usr/bin/ns-snort-rules --download --restart"
    with open('/etc/crontabs/root', 'r') as f:
        lines = f.readlines()
    for line in lines:
        if 'ns-snort-rules' in line:
            return
    with open('/etc/crontabs/root', 'w') as f:
        for line in lines:
            f.write(line)
        f.write(f'{cron_job}\n')

def remove_download_cron_job():
    with open('/etc/crontabs/root', 'r') as f:
        lines = f.readlines()
    with open('/etc/crontabs/root', 'w') as f:
        for line in lines:
            if 'ns-snort-rules' not in line:
                f.write(line)


def __setup(enabled, set_home_net=False, include_vpn=False, ns_policy='balanced'):
    uci = EUci()

    # first setup
    config_dir = uci.get('snort', 'snort', 'config_dir', default = '')
    if config_dir != '/var/ns-snort':
        uci.set('snort', 'snort', 'config_dir', '/var/ns-snort')
        uci.set('snort', 'snort', 'log_dir', '/var/log/snort')
        uci.set('snort', 'snort', 'mode', 'ips')
        uci.set('snort', 'snort', 'manual', '0')
        uci.set('snort', 'snort', 'method', 'nfq')
        uci.set('snort', 'snort', 'external_net', '!$HOME_NET')
        uci.set('snort', 'nfq', 'chain_type', 'forward')
        uci.set('snort', 'nfq', 'queue_maxlen', '4096')

    # always set the number of threads to the number of CPUs
    # if the hardware changes, a new setup is required
    uci.set('snort', 'nfq', 'queue_count', str(os.cpu_count()))
    uci.set('snort', 'nfq', 'thread_count', str(os.cpu_count()))

    if set_home_net:
        uci.set('snort', 'snort', 'home_net', get_snort_homenet(uci, include_vpn))

    uci.set('snort', 'snort', 'ns_policy', ns_policy)

    if enabled:
        uci.set('snort', 'snort', 'enabled', '1')
        add_download_cron_job()
    else:
        uci.set('snort', 'snort', 'enabled', '0')
        remove_download_cron_job()

    uci.save('snort')

cmd = sys.argv[1]


def validate_request(request):
    if 'protocol' not in request or request['protocol'] == '':
        raise ValidationError('protocol', 'required')
    if request['protocol'] not in ['ipv4', 'ipv6']:
        raise ValidationError('protocol', 'invalid')
    if 'ip' not in request or request['ip'] == '':
        raise ValidationError('ip', 'required')
    if 'direction' not in request or request['direction'] == '':
        raise ValidationError('direction', 'required')
    if request['direction'] not in ['src', 'dst']:
        raise ValidationError('direction', 'invalid')


def validate_ip(request):
    try:
        if request['protocol'] == 'ipv4':
            ipaddress.IPv4Address(request['ip'])
        else:
            ipaddress.IPv6Address(request['ip'])
    except ipaddress.AddressValueError:
        raise ValidationError('ip', 'invalid')


def __save_settings():
    data = json.load(sys.stdin)
    if 'enabled' not in data:
        raise ValidationError('enabled', 'required')
    if not isinstance(data['enabled'], bool):
        raise ValidationError('enabled', 'invalid')
    if 'ns_policy' not in data:
        raise ValidationError('ns_policy', 'required')
    if data['ns_policy'] not in ['connectivity', 'balanced', 'security']:
        raise ValidationError('ns_policy', 'invalid')
    __setup(data.get('enabled'), ns_policy=data.get('ns_policy'))
    e_uci = EUci()
    e_uci.set('snort', 'snort', 'oinkcode', data.get('oinkcode', ''))
    e_uci.save('snort')


def __status():
    e_uci = EUci()
    return {
        "enabled": e_uci.get('snort', 'snort', 'enabled', dtype=bool, default=False),
        "ns_policy": e_uci.get('snort', 'snort', 'ns_policy', default='connectivity'),
        "oinkcode": e_uci.get('snort', 'snort', 'oinkcode', default=''),
    }


def __check_oinkcode():
    data = json.load(sys.stdin)
    if 'oinkcode' not in data:
        raise ValidationError('oinkcode', 'required')
    res = subprocess.run([
        "curl",
        "--fail",
        "--location",
        "--output",
        "/dev/null",
        # remember to change the URL even in the `ns-snort-rules` script
        f"https://www.snort.org/rules/snortrules-snapshot-31470.tar.gz?oinkcode={data.get('oinkcode')}"],
        capture_output=True)
    if res.returncode != 0:
        raise ValidationError('oinkcode', 'invalid')


def __list_bypasses():
    e_uci = EUci()
    bypasses_src_v4 = e_uci.get('snort', 'nfq', 'bypass_src_v4', list=True, default=[])
    bypasses_dst_v4 = e_uci.get('snort', 'nfq', 'bypass_dst_v4', list=True, default=[])
    bypasses_src_v6 = e_uci.get('snort', 'nfq', 'bypass_src_v6', list=True, default=[])
    bypasses_dst_v6 = e_uci.get('snort', 'nfq', 'bypass_dst_v6', list=True, default=[])
    # for each bypass, we need to give direction, protocol and ip, also it can contain a comma after the value for the description
    bypasses = []
    for bypass in bypasses_src_v4:
        bypasses.append({
            "direction": "src",
            "protocol": "ipv4",
            "ip": bypass.split(',')[0],
            "description": bypass.split(',')[1] if ',' in bypass else ""
        })
    for bypass in bypasses_dst_v4:
        bypasses.append({
            "direction": "dst",
            "protocol": "ipv4",
            "ip": bypass.split(',')[0],
            "description": bypass.split(',')[1] if ',' in bypass else ""
        })
    for bypass in bypasses_src_v6:
        bypasses.append({
            "direction": "src",
            "protocol": "ipv6",
            "ip": bypass.split(',')[0],
            "description": bypass.split(',')[1] if ',' in bypass else ""
        })
    for bypass in bypasses_dst_v6:
        bypasses.append({
            "direction": "dst",
            "protocol": "ipv6",
            "ip": bypass.split(',')[0],
            "description": bypass.split(',')[1] if ',' in bypass else ""
        })

    return bypasses


def __create_bypass():
    request = json.load(sys.stdin)
    validate_request(request)
    validate_ip(request)
    e_uci = EUci()
    if request['direction'] == 'src':
        if request['protocol'] == 'ipv4':
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_src_v4', list=True, default=[]))
            if any(request['ip'] in bypass for bypass in bypasses):
                raise ValidationError('ip', 'ip_already_used')
            bypasses.append(f"{request['ip']},{request.get('description', '')}")
            e_uci.set('snort', 'nfq', 'bypass_src_v4', bypasses)
        else:
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_src_v6', list=True, default=[]))
            if any(request['ip'] in bypass for bypass in bypasses):
                raise ValidationError('ip', 'ip_already_used')
            bypasses.append(f"{request['ip']},{request.get('description', '')}")
            e_uci.set('snort', 'nfq', 'bypass_src_v6', bypasses)
    else:
        if request['protocol'] == 'ipv4':
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_dst_v4', list=True, default=[]))
            if any(request['ip'] in bypass for bypass in bypasses):
                raise ValidationError('ip', 'ip_already_used')
            bypasses.append(f"{request['ip']},{request.get('description', '')}")
            e_uci.set('snort', 'nfq', 'bypass_dst_v4', bypasses)
        else:
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_dst_v6', list=True, default=[]))
            if any(request['ip'] in bypass for bypass in bypasses):
                raise ValidationError('ip', 'ip_already_used')
            bypasses.append(f"{request['ip']},{request.get('description', '')}")
            e_uci.set('snort', 'nfq', 'bypass_dst_v6', bypasses)
    e_uci.save('snort')


def __delete_bypass():
    request = json.load(sys.stdin)
    validate_request(request)
    e_uci = EUci()
    if request['direction'] == 'src':
        if request['protocol'] == 'ipv4':
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_src_v4', list=True, default=[]))
            bypasses = [bypass for bypass in bypasses if bypass.split(',')[0] != request['ip']]
            e_uci.set('snort', 'nfq', 'bypass_src_v4', bypasses)
        else:
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_src_v6', list=True, default=[]))
            bypasses = [bypass for bypass in bypasses if bypass.split(',')[0] != request['ip']]
            e_uci.set('snort', 'nfq', 'bypass_src_v6', bypasses)
    else:
        if request['protocol'] == 'ipv4':
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_dst_v4', list=True, default=[]))
            bypasses = [bypass for bypass in bypasses if bypass.split(',')[0] != request['ip']]
            e_uci.set('snort', 'nfq', 'bypass_dst_v4', bypasses)
        else:
            bypasses = list(e_uci.get('snort', 'nfq', 'bypass_dst_v6', list=True, default=[]))
            bypasses = [bypass for bypass in bypasses if bypass.split(',')[0] != request['ip']]
            e_uci.set('snort', 'nfq', 'bypass_dst_v6', bypasses)
    e_uci.save('snort')


def __list_disabled_rules():
    e_uci = EUci()
    disabled_rules = []
    for rule in e_uci.get('snort', 'snort', 'ns_disabled_rules', list=True, default=[]):
        split_record = rule.split(',')
        disabled_rules.append({
            "gid": split_record[0],
            "sid": split_record[1],
            "description": split_record[2] if len(split_record) > 2 else ""
        })

    return disabled_rules


def __disable_rule():
    request = json.load(sys.stdin)
    if 'gid' not in request and request['gid'] == '':
        raise ValidationError('gid', 'required')
    if 'sid' not in request and request['sid'] == '':
        raise ValidationError('sid', 'required')
    if 'description' not in request and request['description'] == '':
        raise ValidationError('description', 'required')
    e_uci = EUci()
    disabled_rules = list(e_uci.get('snort', 'snort', 'ns_disabled_rules', list=True, default=[]))
    if any(f"{request['gid']},{request['sid']}," in rule for rule in disabled_rules):
        raise ValidationError('gid', 'duplicate_rule')
    disabled_rules.append(f"{request['gid']},{request['sid']},{request['description']}")
    e_uci.set('snort', 'snort', 'ns_disabled_rules', disabled_rules)
    e_uci.save('snort')


def __enable_rule():
    request = json.load(sys.stdin)
    if 'gid' not in request and request['gid'] == '':
        raise ValidationError('gid', 'required')
    if 'sid' not in request and request['sid'] == '':
        raise ValidationError('sid', 'required')
    e_uci = EUci()
    disabled_rules = list(e_uci.get('snort', 'snort', 'ns_disabled_rules', list=True, default=[]))
    disabled_rules = [rule for rule in disabled_rules if f"{request['gid']},{request['sid']}" not in rule]
    e_uci.set('snort', 'snort', 'ns_disabled_rules', disabled_rules)
    e_uci.save('snort')


def __list_suppressed_alerts():
    e_uci = EUci()
    suppressed_alerts = []
    for rule in e_uci.get('snort', 'snort', 'ns_suppress', list=True, default=[]):
        split_record = rule.split(',')
        suppressed_alerts.append({
            "gid": split_record[0],
            "sid": split_record[1],
            "direction": split_record[2],
            "ip": split_record[3],
            "description": split_record[4] if len(split_record) > 4 else ""
        })

    return suppressed_alerts


def __suppress_alert():
    request = json.load(sys.stdin)
    if 'gid' not in request or request['gid'] == '':
        raise ValidationError('gid', 'required')
    if 'sid' not in request or request['sid'] == '':
        raise ValidationError('sid', 'required')
    if 'direction' not in request or request['direction'] == '':
        raise ValidationError('direction', 'required')
    if 'ip' not in request or request['direction'] == '':
        raise ValidationError('ip', 'required')

    if request['direction'] not in ['by_src', 'by_dst']:
        raise ValidationError('direction', 'invalid')
    try:
        ipaddress.ip_network(request['ip'])
    except:
        raise ValidationError('ip', 'invalid')

    e_uci = EUci()
    suppressed_alerts = list(e_uci.get('snort', 'snort', 'ns_suppress', list=True, default=[]))
    if any(f"{request['gid']},{request['sid']},{request['direction']},{request['ip']}," in rule for rule in suppressed_alerts):
        raise ValidationError('gid', 'duplicate_suppression')
    suppressed_alerts.append(f"{request['gid']},{request['sid']},{request['direction']},{request['ip']},{request.get('description', '')}")
    e_uci.set('snort', 'snort', 'ns_suppress', suppressed_alerts)
    e_uci.save('snort')


def __delete_suppression():
    request = json.load(sys.stdin)
    if 'gid' not in request or request['gid'] == '':
        raise ValidationError('gid', 'required')
    if 'sid' not in request or request['sid'] == '':
        raise ValidationError('sid', 'required')
    if 'direction' not in request or request['direction'] == '':
        raise ValidationError('direction', 'required')
    if 'ip' not in request or request['direction'] == '':
        raise ValidationError('ip', 'required')

    e_uci = EUci()
    suppressed_alerts = list(e_uci.get('snort', 'snort', 'ns_suppress', list=True, default=[]))
    suppressed_alerts = [rule for rule in suppressed_alerts if f"{request['gid']},{request['sid']},{request['direction']},{request['ip']}" not in rule]
    e_uci.set('snort', 'snort', 'ns_suppress', suppressed_alerts)
    e_uci.save('snort')


def __list_events():
    """
    List events only from the last day
    """
    events = []
    for file in glob(f"{LOG_DIR}/*_json.txt"):
        for line in open(file):
            raw = json.loads(line)
            events.append({
                'timestamp': datetime.strptime(raw.get('timestamp'), "%y/%m/%d-%H:%M:%S.%f").isoformat(),
                'protocol': raw.get('proto'),
                'source_address': raw.get('src_addr'),
                'source_port': str(raw.get('src_port')),
                'destination_address': raw.get('dst_addr'),
                'destination_port': str(raw.get('dst_port')),
                'gid': str(raw.get('gid')),
                'sid': str(raw.get('sid')),
                'action': raw.get('action'),
                'description': raw.get('msg')
            })

    events.sort(key=lambda x: x['timestamp'], reverse=True)
    last_day = datetime.now() - timedelta(days=1)
    events = [event for event in events if datetime.fromisoformat(event['timestamp']) > last_day]

    return events


if cmd == 'list':
    print(json.dumps({
        "status": {
            "enabled": True,
            "ns_policy": "balanced",
            "oinkcode": "1234567890",
        },
        "save": {"enabled": True, "ns_policy": "balanced", "oinkcode": "1234567890"},
        "check-oinkcode": {},
        "list-bypasses": {},
        "create-bypass": {"protocol": "ipv4", "ip": "*.*.*.*", "direction": "src", "description": "Description"},
        "delete-bypass": {"protocol": "ipv4", "ip": "*.*.*.*", "direction": "src"},
        "list-disabled-rules": {},
        "disable-rule": {"gid": 1, "sid": 100000, "description": "Description"},
        "enable-rule": {"gid": 1, "sid": 100000},
        "list-suppressed-alerts": {},
        "suppress-alert": {"gid": 1, "sid": 100000, "direction": "by_src", "ip": "*.*.*.*", "description": "Description"},
        "delete-suppression": {"gid": 1, "sid": 100000, "direction": "by_src", "ip": "*.*.*.*"},
        "list-events": {},
    }))
else:
    try:
        action = sys.argv[2]
        if action == "status":
            print(json.dumps(__status()))
        elif action == "save":
            __save_settings()
            print(json.dumps({"status": "success"}))
        elif action == "check-oinkcode":
            __check_oinkcode()
            print(json.dumps({"status": "success"}))
        elif action == "list-bypasses":
            print(json.dumps({"bypasses": __list_bypasses()}))
        elif action == "create-bypass":
            __create_bypass()
            print(json.dumps({"status": "success"}))
        elif action == "delete-bypass":
            __delete_bypass()
            print(json.dumps({"status": "success"}))
        elif action == "list-disabled-rules":
            print(json.dumps({"rules": __list_disabled_rules()}))
        elif action == "disable-rule":
            __disable_rule()
            print(json.dumps({"status": "success"}))
        elif action == "enable-rule":
            __enable_rule()
            print(json.dumps({"status": "success"}))
        elif action == "list-suppressed-alerts":
            print(json.dumps({"alerts": __list_suppressed_alerts()}))
        elif action == "suppress-alert":
            __suppress_alert()
            print(json.dumps({"status": "success"}))
        elif action == "delete-suppression":
            __delete_suppression()
            print(json.dumps({"status": "success"}))
        elif action == "list-events":
            print(json.dumps({"events": __list_events()}))

        else:
            print(json.dumps(utils.generic_error(f"Unknown action: {action}")))
    except ValidationError as e:
        print(json.dumps(utils.validation_error(e.parameter, e.message, e.value)))
