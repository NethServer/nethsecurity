#!/usr/bin/python3

import sys
import json
import argparse
import subprocess
from glob import glob
from euci import EUci

def get_interface_name(interfaces, hwaddr):
    for interface in interfaces:
        if interface["address"] == hwaddr:
            return interface["ifname"]

    return None

def sanitize(name):
    return name.translate({ord(i): '_' for i in ' -.'})

# Parse command line arguments
parser = argparse.ArgumentParser(description="Import network and basic firewall configuration")
parser.add_argument("--quiet", "-q", action="store_true", help="don't print executed actions to stdout")
parser.add_argument("export_dir", nargs=1, help="export directory with uncompressed files")
args = parser.parse_args()

vprint = print if not args.quiet else lambda *a, **k: None

# Read NS7 network configurations
f = open(f'{args.export_dir[0]}/network.json')
data = json.load(f)
f.close()

# Initialize UCI pointer
u = EUci()

# Cleanup default firewall zones
for section in u.get("firewall"):
    s_type = u.get("firewall", section)
    if s_type == "zone":
        zname = u.get("firewall", section, "name")
        if zname == "wan" or zname == "wan6" or zname == "lan":
            vprint(f"Deleting zone {section} ({zname})")
            u.delete("firewall", section)

# Cleanup default network configuration
for section in u.get("network"):
    s_type = u.get("network", section)
    if s_type == "interface" and (section == "wan" or section == "wan6" or section == "lan"):
        vprint(f"Deleting interface {section}")
        u.delete("network", section)
    if s_type == "device":
        ts = u.get_all("network", section)
        if ts['name'] == 'br-lan':
            vprint(f"Deleting interface {section}")
            u.delete("network", section)

local_interfaces = json.loads(subprocess.run(["/sbin/ip", "--json", "address", "show"], check=True, capture_output=True).stdout)

# Create vlan devices
for v in data['vlans']:
    iname = get_interface_name(local_interfaces, v["hwaddr"])
    vname = f'vlan{v["vid"]}'
    u.set("network", vname, "device") # create named record
    u.set("network", vname, "type", v["type"])
    u.set("network", vname, "vid", v["vid"])
    u.set("network", vname, "ifname", iname)
    u.set("network", vname, "name", f'{iname}.{v["vid"]}')

# Create interfaces
for i in data['interfaces']:
    iname = sanitize(i["interface"])
    vprint(f'Creating interface {iname}')
    u.set("network", iname, "interface") # create named record
    u.set("network", iname, "proto", i["proto"])
    u.set("network", iname, "device", get_interface_name(local_interfaces, i["hwaddr"]))
    if i["ipaddr"]:
        u.set("network", iname, "ipaddr", i["ipaddr"])
        u.set("network", iname, "netmask", i["netmask"])
    if i["gateway"]:
        u.set("network", iname, "gateway", i["gateway"])

# Create firewall zones
for z in data['zones']:
    vprint(f'Creating zone {z["name"]}')
    u.set("firewall", z["name"], "zone") # create named record
    u.set("firewall", z["name"], "name", z["name"])
    u.set("firewall", z["name"], "output", z["output"])
    u.set("firewall", z["name"], "input", z["input"])
    u.set("firewall", z["name"], "forward", z["forward"])
    u.set("firewall", z["name"], "network", [sanitize(n) for n in z["network"]])
    if z["name"].startswith("wan"): # setup masquerading for wans
        u.set("firewall", z["name"], "masq", '1')
        u.set("firewall", z["name"], "mtu_fix", '1')

# Create firewall forwardings
for f in data['forwardings']:
    fname = f'{f["src"]}2{f["dest"]}'
    vprint(f'Creating forwarding {fname}')
    u.set("firewall", fname, "forwarding") # create named record
    u.set("firewall", fname, "src", f["src"])
    u.set("firewall", fname, "dest", f["dest"])

# Create snat rules
for s in data['snats']:
    vprint(f'Creating SNAT {s["name"]}')
    sname = sanitize(s["name"])
    u.set("firewall", sname, "nat") # create named record
    u.set("firewall", sname, "name", s["name"])
    u.set("firewall", sname, "target", s["target"])
    u.set("firewall", sname, "proto", [s["proto"]])
    u.set("firewall", sname, "snat_ip", s["snat_ip"])
    u.set("firewall", sname, "src_ip", s["src_ip"])
    u.set("firewall", sname, "src", sanitize(s["src"]))

# Save configuration
u.commit("network")
u.commit("firewall")
