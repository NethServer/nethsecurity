#!/usr/bin/python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import os
import sys
import json
import time
import subprocess
from euci import EUci
from nethsec import utils
import logging
import logging.handlers

out_dir = "/etc/ha"

# Syslog logger for info-level
logger = logging.getLogger('ns-ha')
if not logger.handlers:
    handler = logging.handlers.SysLogHandler(address='/dev/log')
    formatter = logging.Formatter('%(name)s: %(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
logger.setLevel(logging.INFO)

def enable_interfaces(file):
    wan_interfaces = []
    u = EUci()
    with open(os.path.join(out_dir, file), 'r') as f:
        interfaces = json.load(f)
    for interface, options in interfaces.items():
        # WAN interfaces are always enabled on master node
        if file == 'wan_interfaces' or options.get('disabled', '0') == '1':
            u.set('network', interface, 'disabled', '0')
        if file == 'wan_interfaces':
            wan_interfaces.append(interface)
    u.commit('network')
    return wan_interfaces

def enable_routes():
    u = EUci()
    with open(os.path.join(out_dir, 'routes'), 'r') as f:
        routes = json.load(f)
    for route, options in routes.items():
        if options.get('disabled', '0') == '0':
            u.set('network', route, 'disabled', '0')
    u.commit('network')

def enable_hotspot_mac():
    u = EUci()
    devices = utils.get_all_by_type(u, 'network', 'device')
    for d in devices:
        device = devices[d]
        tags = device.get('ns_tag', [])
        if 'ha' in tags and device.get('ns_macaddr'):
            # Force mac address on the device, OpenWrt seems to ignore it
            proc = subprocess.run(["ip", "link", "set", "dev", device.get('name'), "address", device.get('ns_macaddr')], check=True)
            logger.info("Setting mac address on device %s to %s: %s", device.get('name'), device.get('ns_macaddr'), "success" if proc.returncode == 0 else "fail")

if __name__ == "__main__":
    proc = subprocess.run(["/usr/libexec/rpcd/ns.ha", "call", "status"], capture_output=True, text=True)
    status = json.loads(proc.stdout)
    if status.get("state") != "master":
        # Execute only on master node, no matter the role
        sys.exit(0)
    wan_interfaces = enable_interfaces('wan_interfaces')
    enable_interfaces('wg_interfaces')
    enable_interfaces('ipsec_interfaces')
    enable_routes()
    enable_hotspot_mac()
    subprocess.run(["/sbin/reload_config"], capture_output=True)
    # Restart WAN interfaces to force reconnection: reload_config is not enough for
    # interfaces brought down with ifdown command
    if wan_interfaces:
        time.sleep(1)
        for iface in wan_interfaces:
            proc = subprocess.run(["/sbin/ifup", iface], capture_output=True, text=True)
            logger.info("Bringing up interface %s: %s", iface, "success" if proc.returncode == 0 else "fail")
