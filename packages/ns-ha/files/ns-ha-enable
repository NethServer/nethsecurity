#!/usr/bin/python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import os
import sys
import json
import time
import subprocess
from euci import EUci
from nethsec import utils
import logging
import logging.handlers

out_dir = "/etc/ha"

# Syslog logger for info-level
logger = logging.getLogger('ns-ha')
if not logger.handlers:
    handler = logging.handlers.SysLogHandler(address='/dev/log')
    formatter = logging.Formatter('%(name)s: %(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
logger.setLevel(logging.INFO)

def enable_interfaces(file):
    u = EUci()
    with open(os.path.join(out_dir, file), 'r') as f:
        interfaces = json.load(f)
    for interface in interfaces:
        disabled = u.get('network', interface, 'disabled', default='0')
        if disabled == '0':
            time.sleep(0.3)
            # Bring the interface up
            subprocess.run(["/sbin/ifup", interface], capture_output=True, text=True)
            # Return code of ifup is not reliable, so we do not check it nor log it
            logger.info("Bringing up interface %s", interface)

def send_gratuitous_arp(file):
    # Get the mapping interface -> device
    proc = subprocess.run(["ubus", "-v", "call", "network.interface", "dump"], capture_output=True, text=True)
    try:
        network_dump = json.loads(proc.stdout)
    except json.JSONDecodeError:
        logger.error("Can't send gratuitous ARP: failed to decode JSON from network dump")
        return
    device_map = {}
    for iface in network_dump.get('interface', []):
        if 'device' in iface and 'interface' in iface:
            device_map[iface['interface']] = iface['device']
    # Load the file with the interfaces to send gratuitous ARP for
    with open(os.path.join(out_dir, file), 'r') as f:
        interfaces = json.load(f)
    for interface in interfaces:
        if 'ipaddr' in interfaces[interface]:
            device = device_map.get(interface)
            if not device:
                logger.error("Can't send gratuitous ARP: no device found for interface %s", interface)
                continue
            # It should not happen, but ipaddr can contain multiple IPs
            ipaddr = interfaces[interface]['ipaddr']
            if isinstance(ipaddr, str):
                ipaddr = [ipaddr]
            for ip in ipaddr:
                # Remove /mask if present
                ip = ip.split('/')[0]
                # Send gratuitous ARP to update switches ARP tables
                aproc = subprocess.run(["/usr/bin/arping", "-c", "1", "-U", "-I", device, ip], capture_output=True)
                logger.info("Sending gratuitous ARP on interface %s (%s) for IP %s: %s", interface, device, ip, "success" if aproc.returncode == 0 else "fail")

def enable_hotspot_mac():
    u = EUci()
    devices = utils.get_all_by_type(u, 'network', 'device')
    for d in devices:
        device = devices[d]
        tags = device.get('ns_tag', [])
        if 'ha' in tags and device.get('ns_macaddr'):
            # Force mac address on the device, OpenWrt seems to ignore it
            proc = subprocess.run(["/sbin/ifup", "link", "set", "dev", device.get('name'), "address", device.get('ns_macaddr')], check=True)
            logger.info("Setting mac address on device %s to %s: %s", device.get('name'), device.get('ns_macaddr'), "success" if proc.returncode == 0 else "fail")

if __name__ == "__main__":
    proc = subprocess.run(["/usr/libexec/rpcd/ns.ha", "call", "status"], capture_output=True, text=True)
    status = json.loads(proc.stdout)
    if status.get("state") != "master":
        # Execute only on master node, no matter the role
        sys.exit(0)
    enable_interfaces('wan_interfaces')
    enable_interfaces('wg_interfaces')
    enable_interfaces('ipsec_interfaces')
    enable_hotspot_mac()
    send_gratuitous_arp('wan_interfaces')
    subprocess.run(["/sbin/reload_config"], capture_output=True)
