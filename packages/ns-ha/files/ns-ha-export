#!/usr/bin/python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# Export the folloing network configuration to /etc/ha:
# - routes
# - ipsec interfaces
# - wireguard interfaces
# - wireguard peers
# This configuration will be imported as disabled on the backup node

import os
import sys
import json
import shutil
import subprocess
from euci import EUci
from nethsec import utils

out_dir = "/etc/ha"

def export_routes():
    routes = {}
    u = EUci()
    for route in utils.get_all_by_type(u, 'network', 'route'):
        routes[route] = u.get_all('network', route)

    with open(os.path.join(out_dir, 'routes'), 'w') as f:
        json.dump(routes, f)

def export_ipsec_interfaces():
    ipsec_interfaces = {}
    u = EUci()
    for interface in utils.get_all_by_type(u, 'network', 'interface'):
        if interface.startswith('ipsec'):
            ipsec_interfaces[interface] = u.get_all('network', interface)

    with open(os.path.join(out_dir, 'ipsec_interfaces'), 'w') as f:
        json.dump(ipsec_interfaces, f)

def export_wireguard_interfaces():
    wireguard_interfaces = {}
    u = EUci()
    for interface in utils.get_all_by_type(u, 'network', 'interface'):
        if interface.startswith('wg'):
            wireguard_interfaces[interface] = u.get_all('network', interface)

    with open(os.path.join(out_dir, 'wg_interfaces'), 'w') as f:
        json.dump(wireguard_interfaces, f)

def export_wireguard_peers():
    wireguard_peers = {}
    u = EUci()
    for section in u.get_all('network'):
        if u.get('network', section).startswith('wireguard_'):
            wireguard_peers[section] = u.get_all('network', section)

    with open(os.path.join(out_dir, 'wg_peers'), 'w') as f:
        json.dump(wireguard_peers, f)

def export_hotspot_mac():
    mac_address = ""
    u = EUci()
    if u.get('dedalo', 'config', 'disabled', default='1') == '0':
        device = u.get('dedalo', 'config', 'interface')
        try:
            with open(f"/sys/class/net/{device}/address", "r") as f:
                mac_address = f.read().strip()
        except FileNotFoundError:
            # If the device file does not exist, we can skip this part
            pass

        if mac_address:
            with open(os.path.join(out_dir, 'hotspot'), 'w') as f:
                json.dump({"device": device, "mac_address": mac_address}, f)

def export_dhcp_leases():
    # Workaround: the default sync script ignores /tmp/dhcp.leases
    if not os.path.exists("/tmp/dhcp.leases"):
        return
    dst_file = os.path.join(out_dir, "dhcp.leases")
    shutil.copyfile("/tmp/dhcp.leases", dst_file)

if __name__ == '__main__':
    proc = subprocess.run(["/usr/libexec/rpcd/ns.ha", "call", "status"], capture_output=True, text=True)
    status = json.loads(proc.stdout)
    if status.get("role") != "primary":
        # Export must be executed only on primary node
        sys.exit(0)

    # Cleanup the directory if it exists
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    os.makedirs(out_dir, exist_ok=True)
    export_routes()
    export_ipsec_interfaces()
    export_wireguard_interfaces()
    export_wireguard_peers()
    export_hotspot_mac()
    export_dhcp_leases()
