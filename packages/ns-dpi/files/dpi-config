#!/usr/bin/python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

from euci import EUci
import json
import subprocess
from nethsec import utils, objects

def get_interface_ips(interface):
    ret = list()
    try:
        proc = subprocess.run(['/sbin/ifstatus', section], check=True, capture_output=True)
        info = json.loads(proc.stdout)
    except:
        return ret

    for ip_type in ('ipv4-address', 'ipv6-address'):
        if ip_type in info:
            for addr in info[ip_type]:
                if 'address' in addr:
                    ret.append(addr['address'])

    return ret

cfg_file = "/etc/netify.d/netify-flow-actions.json"
config = {
    "version": 1,
    "targets": {},
    "target_defaults": {},
    "target_globals": {
        "ctlabel": {
            "max_bits": 127,
            "connlabel_conf": "/etc/xtables/connlabel.conf"
            }
        },
    "actions": {},
    "exemptions": []
}

# Add firewall IP address as global exemptions
u = EUci()
if u.get('dpi', 'config', 'firewall_exemption', default=0) == '1':
    for section in u.get_all('network'):
        if u.get('network', section) == 'interface':
            ip_addrs = get_interface_ips(section)
            if ip_addrs:
                config["exemptions"] = config["exemptions"] + ip_addrs

# Add custom global exemptions
exemptions = utils.get_all_by_type(u, 'dpi', 'exemption')
for ex_name in exemptions:
    exemption = exemptions[ex_name]
    criteria = exemption.get('criteria', '')
    enabled = exemption.get('enabled', '1')
    if enabled == '1' and criteria:
        if objects.is_object_id(criteria):
            for ip in objects.get_object_ips(u, criteria):
                config["exemptions"].append(ip)
        else:
            config["exemptions"].append(criteria)

rcount = 0
valid_actions = ['block', 'bulk', 'best_effort', 'video', 'voice']
for section in u.get_all('dpi'):
    if u.get('dpi', section) != 'rule':
        continue
    rule = u.get_all('dpi', section)
    if rule['action'] not in valid_actions or not rule['enabled']:
        continue

    if 'criteria' in rule:
        # criteria has precedence over sources, protocol, category and application
        criteria = rule['criteria'].replace('"',"'")
    else:
        # generate criteria from source, protocol, category and application
        sources = []
        for source in rule.get('source', []):
            if objects.is_object_id(source):
                for ip in objects.get_object_ips(u, source):
                    sources.append(f'local_ip == {ip}')
            else: # custom local IPs
                sources.append(f'local_ip == {source}')

        applications = []
        for app in rule.get('application', []):
            applications.append(f"app == '{app}'")
        for proto in rule.get('protocol', []):
            applications.append(f"proto == '{proto.lower()}'")
        for cat in rule.get('category', []):
            applications.append(f"category == '{cat.lower()}'")

        sources_s = ' or '.join(sources)
        applications_s = ' or '.join(applications)
        if len(sources) < 1:
            criteria = f'({applications_s}) ;'
        elif len(applications) < 1:
            criteria = f'({sources_s}) ;'
        else:
            criteria = f'({sources_s}) && ({applications_s}) ;'

    config["actions"][f"rule{rcount}"] = {
        "enabled": rule['enabled'] == '1',
        "interface": rule.get('device', '*'),
        "criteria": criteria,
        "targets": [rule['action']],
        "exemptions": rule.get('exemption', [])
    }
    config["targets"][rule['action']] = {
        "target_type": "ctlabel",
        "labels": [rule['action']]
    }
    rcount = rcount + 1

with open(cfg_file, 'w') as fp:
    json.dump(config, fp)
