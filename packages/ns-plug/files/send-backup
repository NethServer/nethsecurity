#!/bin/bash

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

# Execute the backup using custom command.
# To check if the backup has changed since the last run, it generates an MD5 checksum for each file in the backup.
# If the MD5 checksum of any file has changed, it uploads the backup to a remote server using the `remote-backup` command.

set -e

WORK_DIR="/var/backup"
BACKUP="$WORK_DIR/backup.tar.gz"
MD5_DIR="$WORK_DIR/md5"
MD5_LAST_DIR="/var/backup_md5"
PASSPHRASE="/etc/backup.pass"
INSTALLED_PACKAGES="/etc/backup/installed_packages.txt"
EXCLUDE="/etc/backup.exclude"
UPLOAD_EXIT_CODE=0

log() {
    logger -t "send-backup" "$@"
    if [ -t 2 ]; then
        echo "$@" >&2
    fi
}

list_installed_packages() {
    # Copied from sysupgrade
    find /usr/lib/opkg/info -name "*.control" \( \
                                        \( -exec test -f /rom/{} \; -exec echo {} rom \; \) -o \
                                        \( -exec test -f /overlay/upper/{} \; -exec echo {} overlay \; \) -o \
                                        \( -exec echo {} unknown \; \) \
                                        \) | sed -e 's,.*/,,;s/\.control /\t/'
}

send() {
    if [ -s $PASSPHRASE ]; then
        # send encrypted backup
        gpg --batch -c --passphrase-file $PASSPHRASE $BACKUP
        remote-backup upload "$BACKUP.gpg" &> /dev/null || UPLOAD_EXIT_CODE=$?
    else
        log "[WARNING] No passphrase found, sending unencrypted backup. This method is deprecated and will be removed in the future."
        remote-backup upload "$BACKUP" &> /dev/null || UPLOAD_EXIT_CODE=$?
    fi
    if [ "$UPLOAD_EXIT_CODE" -ne 0 ]; then
        log "[ERROR] Upload failed with exit code $UPLOAD_EXIT_CODE"
    else
        log "[INFO] Backup upload completed successfully"
    fi
    rm -f "$BACKUP" "$BACKUP.gpg" "$INSTALLED_PACKAGES"
    rm -rf "$MD5_LAST_DIR"
    mv "$MD5_DIR" "$MD5_LAST_DIR"
    exit $UPLOAD_EXIT_CODE
}

SYSTEM_ID=$(uci -q get ns-plug.config.system_id)
SYSTEM_SECRET=$(uci -q get ns-plug.config.secret)

if [ -z "$SYSTEM_ID" ] || [ -z "$SYSTEM_SECRET" ]; then
    # System ID and System secret not found, configure ns-plug to enable it
    exit 0
fi

# Create exclude file if it doesn't exist
if [ ! -f "$EXCLUDE" ]; then
    touch "$EXCLUDE"
fi

# List installed packages
mkdir -p "$(dirname $INSTALLED_PACKAGES)"
list_installed_packages > $INSTALLED_PACKAGES

# Create the backup
mkdir -p $WORK_DIR
mkdir -p $MD5_DIR
sysupgrade -k -l | while read -r file; do
    [ -e "$file" ] && ! grep -qxF "$file" "$EXCLUDE" && echo "$file"
done | tar -czf $BACKUP -C / -T - 2>/dev/null

# Generate MD5 for each file in the backup
sysupgrade -k -l | while read -r file; do
    if [ -e "$file" ] && ! grep -qxF "$file" "$EXCLUDE"; then
        md5sum "$file" | awk '{print $1}' > "$MD5_DIR/$(basename $file).md5"
    fi
done

# Check if any file's MD5 has changed
CHANGED=0
if [ ! -d "$MD5_LAST_DIR" ]; then
    CHANGED=1
else
    for file in "$MD5_DIR"/*.md5; do
        base_file=$(basename "$file")
        if [ ! -f "$MD5_LAST_DIR/$base_file" ] || [ "$(cat "$file")" != "$(cat "$MD5_LAST_DIR/$base_file")" ]; then
            CHANGED=1
            break
        fi
    done
fi

# Send the backup if any file has changed
if [ "$CHANGED" -eq 1 ]; then
    send
fi
